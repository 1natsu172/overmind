import { EventType, IConfiguration, Overmind } from 'overmind'

import { createElement } from './createElement'
import { patch, setApp } from './utils'

export interface IComponent<
  Config extends IConfiguration,
  Props = {},
  State = {}
> {
  (
    props: Props,
    overmind: {
      state: State
      changeState: (newState: State) => void
      store: Overmind<Config>['state']
      actions: Overmind<Config>['actions']
      effects: Overmind<Config>['effects']
    }
  ): any
}

declare global {
  // @ts-ignore
  namespace JSX {
    interface IntrinsicElements {
      self: React.DetailedHTMLProps<
        React.HtmlHTMLAttributes<HTMLHtmlElement> & {
          state?: any
          onMount?: (el: HTMLElement) => void | (() => void)
        },
        HTMLHtmlElement
      >
    }
  }
}

declare module 'react' {
  interface HTMLAttributes<T>
    extends React.AriaAttributes,
      React.DOMAttributes<T> {
    onInsert?: (el: HTMLElement) => void
    onUpdate?: (el: HTMLElement) => void
    onDestroy?: (el: HTMLElement) => void
    onEnter?: (el: HTMLElement) => void
    onLeave?: (el: HTMLElement) => void
    class?: {
      [key: string]: boolean
    }
  }
}

const render = (app, vnode, container) => {
  setApp(app)
  patch(container, vnode())
}

export { createElement, render }
