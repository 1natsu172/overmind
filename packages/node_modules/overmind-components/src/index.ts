import { EventType, IConfiguration, Overmind } from 'overmind'

import { createElement } from './createElement'
import { patch, setApp } from './utils'

export interface IComponent<
  Config extends IConfiguration,
  Props = {},
  State = {}
> {
  (
    props: Props,
    overmind: {
      state: State
      changeState: (newState: State) => void
      appState: Overmind<Config>['state']
      actions: Overmind<Config>['actions']
      effects: Overmind<Config>['effects']
      reaction: Overmind<Config>['reaction']
    }
  ): any
}

export type Child<P = any> =
  | {
      [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K]
        ? K
        : never
    }[keyof JSX.IntrinsicElements]
  | IComponent<any, any, any>
  | null
  | string

declare global {
  // @ts-ignore
  namespace JSX {
    interface IntrinsicElements {
      self: React.DetailedHTMLProps<
        React.HtmlHTMLAttributes<HTMLHtmlElement>,
        HTMLHtmlElement
      >
    }
  }
}

declare module 'react' {
  interface HTMLAttributes<T> extends React.DOMAttributes<T> {
    onMount?: (el: HTMLElement) => void | (() => void)
    onEnter?: (el: HTMLElement) => void | (() => void)
    class?: {
      [key: string]: boolean
    }
  }
}

const render = (app, vnode, container) => {
  setApp(app)
  patch(container, vnode())
}

export { createElement, render }
