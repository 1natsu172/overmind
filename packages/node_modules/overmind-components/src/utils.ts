export const SELF = 'self'

export function getName(name) {
  return name.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase()
}

export function isEvent(key) {
  return (
    key.length > 2 && key.startsWith('on') && key[2] === key[2].toUpperCase()
  )
}

export function isHook(key) {
  return (
    key === 'onInsert' ||
    key === 'onUpdate' ||
    key === 'onDestroy' ||
    key === 'onRemove'
  )
}

export function getEvent(key) {
  const eventName = key.toLowerCase().substr(2)

  if (eventName === 'change') {
    return 'input'
  }

  if (eventName === 'doubleclick') {
    return 'dblclick'
  }

  if (eventName === 'update') {
    return 'postpatch'
  }

  return eventName
}

let isHoldingCmdCTRL = false

if (process.env.NODE_ENV === 'development') {
}

const pathDescriptions = document.createElement('div')
pathDescriptions.style.position = 'absolute'
pathDescriptions.style.zIndex = '9999999999999'
pathDescriptions.style.backgroundColor = '#333'
pathDescriptions.style.padding = '0.5rem'
pathDescriptions.style.fontFamily = 'Arial'
pathDescriptions.style.maxWidth = '300px'
pathDescriptions.style.color = '#FAFAFA'
pathDescriptions.style.display = 'none'
document.body.appendChild(pathDescriptions)

export function normalizeAttrs(tag, attrs) {
  return Object.keys(attrs || {}).reduce(
    (aggr, key) => {
      if (tag === SELF && key === 'onMount') {
        aggr.hook = aggr.hook || {}
        aggr.hook.insert = (elm) => {
          const unmount = attrs[key](elm)

          if (unmount) {
            elm.__overmind = Object.assign(elm.__overmind || {}, {
              unmount,
            })
          }
        }

        return aggr
      }

      if (tag === SELF && key === 'onUnmount') {
        aggr.hook = aggr.hook || {}
        aggr.hook.destroy = (elm) => {
          attrs[key](elm)
          if (elm.__overmind.unmount) {
            elm.__overmind.unmount()
          }
        }

        return aggr
      }

      if (key === 'onEnter') {
        aggr.hook = aggr.hook || {}
        aggr.hook.insert = (vnode) =>
          requestAnimationFrame(() => attrs[key](vnode.elm || vnode))

        return aggr
      }

      if (key === 'onLeave') {
        aggr.hook = aggr.hook || {}
        aggr.hook.remove = (vnode, done) => {
          vnode.elm.addEventListener('transitionend', function transitionEnd() {
            vnode.elm.removeEventListener('transitionEnd', transitionEnd)
            done()
          })
          attrs[key](vnode.elm)
        }

        return aggr
      }

      if (isHook(key)) {
        aggr.hook = aggr.hook || {}
        aggr.hook[getEvent(key)] = (...args) => {
          switch (key) {
            case 'onInsert':
              return attrs[key](args[0].elm)
            case 'onUpdate':
              return attrs[key](tag === SELF ? args[0] : args[1].elm)
            case 'onDestroy':
              return attrs[key](args[0].elm)
            case 'onRemove':
              return attrs[key](args[0].elm, args[1])
          }
        }

        return aggr
      }

      if (isEvent(key)) {
        aggr.on = aggr.on || {}
        aggr.on[getEvent(key)] = attrs[key]

        return aggr
      }

      if (key === 'key' || key === 'style' || key === 'class') {
        aggr[key] = attrs[key]

        return aggr
      }

      if (
        key === 'value' ||
        key === 'checked' ||
        key === 'selected' ||
        key === 'className'
      ) {
        aggr.props = aggr.props || {}
        aggr.props[key] = attrs[key]

        return aggr
      }

      aggr.attrs = aggr.attrs || {}
      aggr.attrs[key.startsWith('html') ? key.substr(4) : key] = attrs[key]

      return aggr
    },
    tag === SELF && process.env.NODE_ENV === 'development'
      ? {
          on: {
            mouseover: (event) => {
              event.stopPropagation()
              event.currentTarget.__prevDisplay = window
                .getComputedStyle(event.currentTarget)
                .getPropertyValue('display')
              event.currentTarget.style.display = event.currentTarget
                .__prevDisplay
                ? event.currentTarget.__prevDisplay
                : 'block'
              event.currentTarget.style.outline = 'solid'
              const boundingRect = event.currentTarget.getBoundingClientRect()

              pathDescriptions.style.display = 'block'
              pathDescriptions.style.top = boundingRect.bottom + 'px'
              pathDescriptions.style.left = boundingRect.left + 'px'
              pathDescriptions.innerHTML = `
              <h3>${event.currentTarget.__overmind.name}</h3>
                <div>${Array.from(
                  event.currentTarget.__overmind.tree.pathDependencies
                ).join(', ')}</div>
              `
            },
            mouseout: (event) => {
              event.stopPropagation()
              pathDescriptions.style.display = 'none'
              event.currentTarget.style.display =
                event.currentTarget.__prevDisplay
              event.currentTarget.style.outline = null
            },
          },
        }
      : ({} as any)
  )
}
