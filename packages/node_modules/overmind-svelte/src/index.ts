import { EventType } from 'overmind'
import { onMount, afterUpdate, onDestroy } from 'svelte'

const IS_PRODUCTION = process.env.NODE_ENV === 'production'

let nextComponentId = 0

export function createMixin (overmind) {
  const componentId = nextComponentId++
  let nextComponentInstanceId = 0
  let currentFlushId = 0

  const subscribe = listener => {
    const tree = overmind.proxyStateTree.getTrackStateTree()
    const componentInstanceId = nextComponentInstanceId++
    let isUpdating = false

    tree.track((mutations, paths, flushId) => {
      currentFlushId = flushId
      isUpdating = true
      listener(tree)
    })

    listener(tree)

    if (IS_PRODUCTION) {
      afterUpdate(() => {
        tree.stopTracking()
        isUpdating = false
      })
    } else {
      onMount(() => {
        overmind.eventHub.emitAsync(EventType.COMPONENT_ADD, {
          componentId,
          componentInstanceId,
          name: '',
          paths: Array.from(tree.pathDependencies)
        })
      })

      afterUpdate(() => {
        tree.stopTracking()
        if (isUpdating) {
          overmind.eventHub.emitAsync(EventType.COMPONENT_UPDATE, {
            componentId,
            componentInstanceId,
            name: '',
            flushId: currentFlushId,
            paths: Array.from(tree.pathDependencies)
          })
        }
        isUpdating = false
      })
    }

    return () => {
      tree.stopTracking()
      overmind.proxyStateTree.disposeTree(tree)
      overmind.eventHub.emitAsync(EventType.COMPONENT_REMOVE, {
        componentId,
        componentInstanceId: componentInstanceId,
        name: ''
      })
    }
  }

  const reaction = (...args) => {
    const dispose = overmind.reaction(...args)

    onDestroy(() => {
      dispose()
    })
  }

  return {
    subscribe,
    state: overmind.state,
    actions: overmind.actions,
    effects: overmind.effects,
    addMutationListener: overmind.addMutationListener,
    reaction: reaction
  }
}
