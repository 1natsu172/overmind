import { createElement } from 'overmind-components'

import { Component } from '../../overmind'
import {
  EffectHistoryRecord,
  FlushHistoryRecord,
  HistoryRecordType,
  MutationHistoryRecord,
} from '../../overmind/types'
import ValueInspector from '../ValueInspector'
import * as styles from './styles'

const History: Component = (_, { appState }) => {
  return (
    <self className={styles.wrapper}>
      {appState.history.map((record, index) => {
        switch (record.type) {
          case HistoryRecordType.Mutation:
            const mutationRecord = record as MutationHistoryRecord

            return (
              <div className={styles.recordWrapper} key={index}>
                <div className={styles.label}>?</div>
                <div className={styles.actionName}>
                  {mutationRecord.actionName}
                </div>
                <div className={styles.mutationType}>
                  {mutationRecord.data.method}
                </div>
                <div className={styles.mutationPath}>
                  {mutationRecord.data.path}
                </div>
                {mutationRecord.data.args.map((arg, index) => (
                  <div className={styles.arg} key={'arg_' + index}>
                    <ValueInspector value={arg} small />
                  </div>
                ))}
              </div>
            )
          case HistoryRecordType.Flush:
            const flushRecord = record as FlushHistoryRecord

            return (
              <div className={styles.recordWrapper} key={index}>
                <div className={styles.label}>?</div>
                <div className={styles.actionName}>
                  {flushRecord.actionName}
                </div>
                <div className={styles.flushDetail}>
                  {flushRecord.data.components.length} ?
                  {flushRecord.data.components.length ? (
                    <div className={styles.flushPopup}>
                      {flushRecord.data.components.join(', ')}
                    </div>
                  ) : null}
                </div>
                <div className={styles.flushDetail}>
                  {flushRecord.data.derived.length} ?
                  {flushRecord.data.derived.length ? (
                    <div className={styles.flushPopup}>
                      {flushRecord.data.derived.join(', ')}
                    </div>
                  ) : null}
                </div>
              </div>
            )
          case HistoryRecordType.Effect:
            const effectRecord = record as EffectHistoryRecord

            // If the effect was sync, we do not show both start and end
            if (
              appState.history[index - 1] &&
              appState.history[index - 1].data.effectId ===
                effectRecord.data.effectId
            ) {
              return null
            }

            return (
              <div className={styles.recordWrapper} key={index}>
                <div className={styles.label}>
                  {effectRecord.data.isPending ? '?' : '?'}
                </div>
                <div className={styles.actionName}>
                  {effectRecord.actionName}
                </div>
                <div className={styles.effectPath}>
                  {effectRecord.data.name
                    ? effectRecord.data.name + '.' + effectRecord.data.method
                    : effectRecord.data.method}
                </div>
                {effectRecord.data.args.map((arg, index) => (
                  <div className={styles.arg} key={'arg_' + index}>
                    <ValueInspector value={arg} small />
                  </div>
                ))}
              </div>
            )
        }

        return null
      })}
    </self>
  )
}

export default History
