import { css } from 'emotion'
import { createElement } from 'overmind-components'

import { Component } from '../../overmind'
import { ActionsListItemType } from '../../overmind/types'
import { nameToColor } from '../../overmind/utils'
import * as textStyles from '../../styles/text'
import * as styles from './styles'

const ActionsList: Component = (_, { appState, actions }) => (
  <self className={styles.wrapper}>
    {appState.currentApp.actionsList.length ? (
      <div className={styles.clearItems} onClick={() => actions.clearActions()}>
        clear >
      </div>
    ) : null}
    {appState.currentApp.actionsList.map((item, index) => {
      if (item.type === ActionsListItemType.ACTION) {
        const action = appState.currentApp.actions[item.id]
        const nextItem = appState.currentApp.actionsList[index + 1]
        const nextAction =
          nextItem && nextItem.type === ActionsListItemType.ACTION
            ? appState.currentApp.actions[nextItem.id]
            : null

        const actionResult = (
          <div
            className={css(
              styles.actionItem,
              appState.currentApp.currentActionId === item.id && styles.selected
            )}
            key={item.id}
            onClick={() => actions.selectAction(item.id)}
          >
            <span
              className={styles.actionColor}
              style={{
                backgroundColor: nameToColor(action.actionName),
              }}
            />
            <span className={textStyles.denseNormal}>{action.actionName}</span>
            <span
              className={styles.errorIndication}
              style={{
                visibility: action.hasError ? 'visible' : 'hidden',
              }}
            />
          </div>
        )
        if (nextAction && action.time - nextAction.time >= 1000) {
          return (
            <div key={item.id}>
              {actionResult}
              <div className={styles.separator} />
            </div>
          )
        }

        return actionResult
      }
      const mainAction = appState.currentApp.actions[item.actionIds[0]]
      const groupedActionIds = item.actionIds.slice(1)

      return (
        <div key={item.id}>
          <div
            className={css(
              styles.actionItem,
              appState.currentApp.currentActionId === item.id && styles.selected
            )}
            onClick={() => actions.selectAction(item.id)}
          >
            <span
              className={styles.actionColor}
              style={{ backgroundColor: nameToColor(mainAction.actionName) }}
            />
            <span className={textStyles.denseNormal}>
              {mainAction.actionName} ( {groupedActionIds.length + 1} )
            </span>
          </div>
          {item.isCollapsed
            ? null
            : groupedActionIds.map((actionId) => {
                const action = appState.currentApp.actions[actionId]
                return (
                  <div
                    className={css(
                      styles.actionSubItem,
                      appState.currentApp.currentActionId === actionId &&
                        styles.selected
                    )}
                    key={actionId}
                    onClick={() => actions.selectAction(actionId)}
                  >
                    <span className={textStyles.description}>
                      {action.actionName}
                    </span>
                  </div>
                )
              })}
        </div>
      )
    })}
  </self>
)

export default ActionsList
