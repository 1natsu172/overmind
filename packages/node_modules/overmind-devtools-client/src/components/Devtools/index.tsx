import { css } from 'emotion'
import { createElement } from 'overmind-components'

import { Component } from '../../overmind'
import * as text from '../../styles/text'
import { colors } from '../../theme'
import Workspace from '../Workspace'
import * as styles from './styles'

const Devtools: Component = (_, { appState, actions }) => {
  if (appState.error) {
    return (
      <self className={styles.wrapper}>
        <div className={styles.container}>
          <div className={css(text.header, text.white)}>
            Ops, there is an error :(
          </div>
          <div className={text.red}>{appState.error}</div>
        </div>
      </self>
    )
  }

  return appState.isConnecting ? (
    <self className={styles.wrapper}>
      <h1>Waiting for an app to connect to {appState.port}...</h1>
      <pre className={styles.code}>
        <span style={{ color: colors.purple }}>const</span> overmind ={' '}
        {appState.port === 3031 ? (
          <span>
            <span style={{ color: colors.green }}>createOvermind</span>(config)
          </span>
        ) : (
          <div>
            <span style={{ color: colors.green }}>createOvermind</span>(config,{' '}
            {'{'}
            {`\n`}
            {'  '}devtools:{' '}
            <span style={{ color: colors.yellow }}>
              "localhost:{appState.port}"
            </span>
            {`\n`}
            {'}'})
          </div>
        )}
      </pre>
      <h3>Change port</h3>
      <input
        id="port-input"
        className={styles.newPort}
        placeholder="Port..."
        onKeyDown={(event) => {
          if (event.keyCode === 13) {
            // @ts-ignore
            handleFormSubmit(event)
          }
        }}
      />
    </self>
  ) : (
    <self
      className={styles.wrapper}
      onMount={() => {
        const listener = (event: KeyboardEvent) => {
          if (event.metaKey && event.keyCode === 82) {
            actions.refreshApp()
          }
        }

        document.addEventListener('keydown', listener)

        return () => {
          document.removeEventListener('keydown', listener)
        }
      }}
    >
      <Workspace />
    </self>
  )
}

export default Devtools
