import { css } from 'emotion'
import { createElement } from 'overmind-components'
import { ReactNode } from 'react'
import { FaEdit } from 'react-icons/fa'

import { Component } from '../../overmind'
import { isValidJson } from '../../overmind/utils'
import { colors } from '../../theme'
import * as styles from './styles'
import { isArray, isObject } from './utils'

function renderValue({
  path,
  value,
  renderPaths,
  expandedPaths,
  onClickPath,
  onToggleExpand,
  selectedStatePath,
  onSubmitState,
}: {
  onSubmitState?: (newState: string) => void
  selectedStatePath?: string
  onToggleExpand: (path: string[]) => void
  path: string
  value: any
  renderPaths?: RenderPaths
  expandedPaths: string[]
  onClickPath?: (path: string[]) => void
}) {
  const wrapper = renderPaths && renderPaths[path]
  let node

  if (isObject(value)) {
    node = (
      <Nested
        key={path}
        startBracket="{"
        endBracket="}"
        path={path}
        expandedPaths={expandedPaths}
        hasWrapper={Boolean(wrapper)}
        onClickPath={onClickPath}
        renderPaths={renderPaths}
        onToggleExpand={onToggleExpand}
        isArray={false}
        value={value}
        selectedStatePath={selectedStatePath}
        onSubmitState={onSubmitState}
      />
    )
  } else if (isArray(value)) {
    node = (
      <Nested
        key={path}
        startBracket="["
        endBracket="]"
        renderPaths={renderPaths}
        path={path}
        expandedPaths={expandedPaths}
        hasWrapper={Boolean(wrapper)}
        onClickPath={onClickPath}
        onToggleExpand={onToggleExpand}
        isArray
        value={value}
        selectedStatePath={selectedStatePath}
        onSubmitState={onSubmitState}
      />
    )
  } else {
    node = (
      <ValueComponent
        key={path}
        path={path}
        value={value}
        onClickPath={onClickPath}
        selectedStatePath={selectedStatePath}
        hasWrapper={Boolean(wrapper)}
        onSubmitState={onSubmitState}
      />
    )
  }

  return wrapper ? wrapper(node) : node
}

type PathToolsProps = {
  path: string
  onClickPath: (path: string[]) => void
  disabled: boolean
  children: ReactNode
}

const PathTools: Component<PathToolsProps> = ({
  path,
  onClickPath,
  children,
  disabled,
}) => {
  return disabled ? (
    <self className={styles.pathToolsWrapper}>{children}</self>
  ) : (
    <self className={styles.pathToolsWrapper}>
      {children}{' '}
      <span
        className={styles.toolIcon}
        onClick={(event) => {
          event.stopPropagation()
          onClickPath(path.split('.'))
        }}
      >
        ?
      </span>
    </self>
  )
}

type EditValueProps = {
  value: any
  onSubmit: (newState: string) => void
}

const EditValue: Component<EditValueProps> = ({ value, onSubmit }) => {
  // const [state, setState] = useState(() => JSON.stringify(value, null, 2))
  const isValid = true // isValidJson(state)

  return (
    <self
      className={styles.editValueWrapper}
      onClick={(event) => event.stopPropagation()}
    >
      <div className={styles.editValuePopup}>
        <textarea
          autoFocus
          value={''}
          onChange={(event) => {}}
          className={styles.newState}
          style={{
            borderColor: isValid ? null : colors.red,
          }}
        />
        {isValid ? (
          <button onClick={() => onSubmit('')} className={styles.ok}>
            OK
          </button>
        ) : null}
      </div>
    </self>
  )
}

type NestedProps = {
  startBracket: string
  endBracket: string
  expandedPaths: string[]
  renderPaths: RenderPaths
  path: string
  hasWrapper: boolean
  isArray: boolean
  value: any
  onToggleExpand: (path: string[]) => void
  onClickPath?: (path: string[]) => void
  selectedStatePath: string
  onSubmitState: (newState: string) => void
}

const Nested: Component<NestedProps> = ({
  expandedPaths,
  path,
  onToggleExpand,
  onClickPath,
  startBracket,
  renderPaths,
  hasWrapper,
  endBracket,
  isArray,
  selectedStatePath,
  value,
  onSubmitState,
}) => {
  const shouldCollapse = !expandedPaths.includes(path)

  if (selectedStatePath && path === selectedStatePath) {
    return (
      <self
        className={styles.inlineNested}
        onClick={(event) => {
          event.stopPropagation()
          onToggleExpand(path.split('.'))
        }}
      >
        {path.length ? (
          <span className={styles.key}>{path.split('.').pop()}:</span>
        ) : null}
        <EditValue value={value} onSubmit={onSubmitState} />
      </self>
    )
  }

  console.log(path, shouldCollapse, expandedPaths)

  if (shouldCollapse) {
    const keys = Object.keys(value)

    return (
      <self
        className={styles.inlineNested}
        onClick={(event) => {
          event.stopPropagation()
          console.log('TOGGLE', path.split('.'))
          onToggleExpand(path.split('.'))
        }}
      >
        <PathTools
          path={path}
          onClickPath={onClickPath}
          disabled={!onSubmitState || hasWrapper}
        >
          {path.length ? (
            <span className={styles.key}>{path.split('.').pop()}:</span>
          ) : null}
          {startBracket}
          <span className={styles.keyCount}>
            {isArray
              ? keys.length + ' items'
              : keys.slice(0, 3).join(', ') + '...'}
          </span>
          {endBracket}
        </PathTools>
      </self>
    )
  }

  return (
    <self>
      <div
        className={styles.bracket(true)}
        onClick={(event) => {
          event.stopPropagation()
          onToggleExpand(path.split('.'))
        }}
      >
        <PathTools
          path={path}
          onClickPath={onClickPath}
          disabled={!onSubmitState || hasWrapper}
        >
          {path.length ? (
            <span className={styles.key}>{path.split('.').pop()}:</span>
          ) : null}
          {startBracket}
        </PathTools>
      </div>
      <div className={styles.nestedChildren}>
        {Array.isArray(value)
          ? value.map((_, index) =>
              renderValue({
                path: path.concat((path ? '.' : '') + String(index)),
                value: value[index],
                renderPaths,
                expandedPaths,
                onClickPath,
                onSubmitState,
                onToggleExpand,
                selectedStatePath,
              })
            )
          : Object.keys(value).map((key) =>
              renderValue({
                path: path.concat((path ? '.' : '') + key),
                value: value[key],
                renderPaths,
                expandedPaths,
                onClickPath,
                onSubmitState,
                onToggleExpand,
                selectedStatePath,
              })
            )}
      </div>
      <div className={styles.bracket(false)}>{endBracket}</div>
    </self>
  )
}

type ValueComponentProps = {
  value: string | number | boolean
  path: string
  hasWrapper: boolean
  onClickPath?: (path: string[]) => void
  selectedStatePath: string
  onSubmitState: (newState: string) => void
}

const ValueComponent: Component<ValueComponentProps> = ({
  value,
  path,
  onClickPath,
  selectedStatePath,
  onSubmitState,
  hasWrapper,
}) => {
  if (selectedStatePath && path === selectedStatePath) {
    return (
      <self className={styles.genericValue}>
        {path.length ? (
          <span className={styles.key}>{path.split('.').pop()}:</span>
        ) : null}
        <EditValue value={value} onSubmit={onSubmitState} />
      </self>
    )
  }

  if (
    typeof value === 'string' &&
    value[0] === '[' &&
    value[value.length - 1] === ']'
  ) {
    return (
      <self className={styles.otherValue}>
        <PathTools
          path={path}
          onClickPath={onClickPath}
          disabled={!onSubmitState || hasWrapper}
        >
          {path.length ? (
            <span className={styles.key}>{path.split('.').pop()}:</span>
          ) : null}
          {value.substr(1, value.length - 2)}
        </PathTools>
      </self>
    )
  }

  if (typeof value === 'string') {
    return (
      <self className={styles.stringValue}>
        <PathTools
          path={path}
          onClickPath={onClickPath}
          disabled={!onSubmitState || hasWrapper}
        >
          {path.length ? (
            <span className={styles.key}>{path.split('.').pop()}:</span>
          ) : null}
          <div
            onMouseOver={(event) => {
              event.currentTarget.style.maxWidth = '100%'
            }}
            onMouseOut={(event) => {
              delete event.currentTarget.style.maxWidth
            }}
          >
            "{value}"
          </div>
        </PathTools>
      </self>
    )
  }

  return (
    <self className={styles.genericValue}>
      <PathTools
        path={path}
        onClickPath={onClickPath}
        disabled={!onSubmitState || hasWrapper}
      >
        {path.length ? (
          <span className={styles.key}>{path.split('.').pop()}:</span>
        ) : null}
        {String(value)}
      </PathTools>
    </self>
  )
}

export type RenderPaths = {
  [path: string]: (children: React.ReactChildren) => React.ReactNode
}

type InspectorProps = {
  value: object
  expandedPaths: string[]
  small?: boolean
  onToggleExpand: (path: string[]) => void
  onClickPath?: (path: string[]) => void
  renderPaths?: RenderPaths
  selectedStatePath?: string
  onSubmitState?: (newState: string) => void
}

const Inspector: Component<InspectorProps> = ({
  value,
  expandedPaths,
  small,
  onToggleExpand,
  onClickPath = () => {},
  renderPaths,
  selectedStatePath = '',
  onSubmitState,
}) => {
  console.log('EXPANDED PATHS', typeof expandedPaths)
  return (
    <self className={css(small ? styles.smallWrapper : styles.wrapper)}>
      {renderValue({
        path: '',
        value,
        renderPaths,
        expandedPaths,
        onClickPath,
        onToggleExpand,
        selectedStatePath,
        onSubmitState,
      })}
    </self>
  )
}

export default Inspector
