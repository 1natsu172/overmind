import { css } from 'emotion'
import { createElement } from 'overmind-components'

import { Component } from '../../overmind'
import * as textStyles from '../../styles/text'
import ValueInspector from '../ValueInspector'
import * as styles from './styles'

const Flushes: Component = (_, { appState }) => (
  <self className={styles.wrapper}>
    <div>
      <div className={styles.panels}>
        <div className={styles.panel}>
          <span className={css(textStyles.label, textStyles.denseLabel)}>
            flush count
          </span>
          <span className={css(textStyles.header, textStyles.denseHeader)}>
            {appState.flushes.length}
          </span>
        </div>
        <div className={styles.panel}>
          <span className={css(textStyles.label, textStyles.denseLabel)}>
            mutations count
          </span>
          <span className={css(textStyles.header, textStyles.denseHeader)}>
            {appState.flushesMutationsCount}
          </span>
        </div>
        <div className={styles.panel}>
          <span className={css(textStyles.label, textStyles.denseLabel)}>
            paths updated
          </span>
          <span className={css(textStyles.header, textStyles.denseHeader)}>
            {appState.flushesStatePathCount}
          </span>
        </div>
      </div>
    </div>
    {appState.flushes.map((flush, index) => (
      <div className={styles.flushWrapper} key={index}>
        <div className={styles.flushHeader}>
          <div className={styles.flushTitle}>{flush.actionName}</div>
          <div className={styles.flushDetails} />
        </div>
        <div className={styles.flushBody}>
          {flush.mutations.map((mutation, index) => {
            return (
              <span className={styles.mutation} key={index}>
                <span
                  className={css(textStyles.description, textStyles.yellow)}
                >
                  {mutation.method}
                </span>
                <span className={textStyles.description}>{mutation.path}</span>
                {mutation.args.map((arg, index) => (
                  <ValueInspector key={index} value={arg} small />
                ))}
              </span>
            )
          })}
        </div>
      </div>
    ))}
  </self>
)

export default Flushes
