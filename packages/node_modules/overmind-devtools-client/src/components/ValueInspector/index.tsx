import { createElement } from 'overmind-components'

import { Component } from '../../overmind'
import Inspector from '../Inspector'
import * as styles from './styles'

type Props = {
  value: any
  small?: boolean
}

const ValueInspector: Component<Props, { expandedPaths: string[] }> = (
  { value, small },
  { state: { expandedPaths }, changeState }
) => {
  function onToggleExpand(path: string[]) {
    const pathString = path.join('.')

    if (expandedPaths.includes(pathString)) {
      changeState({
        expandedPaths: expandedPaths.filter(
          (currentPath) => currentPath !== pathString
        ),
      })
    } else {
      changeState({ expandedPaths: expandedPaths.concat(pathString) })
    }
  }

  return (
    <self className={styles.wrapper}>
      <Inspector
        value={value}
        expandedPaths={expandedPaths}
        onToggleExpand={onToggleExpand}
        small={small}
      />
    </self>
  )
}

ValueInspector.getInitialState = () => ({
  expandedPaths: [],
})

export default ValueInspector
