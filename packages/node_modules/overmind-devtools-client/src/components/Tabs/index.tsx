import { css } from 'emotion'
import { createElement } from 'overmind-components'
import stateSvg from '@fortawesome/fontawesome-free/svgs/solid/database.svg'
import chromeSvg from '@fortawesome/fontawesome-free/svgs/brands/chrome.svg'
import cogsSvg from '@fortawesome/fontawesome-free/svgs/solid/cogs.svg'
import projectDiagramSvg from '@fortawesome/fontawesome-free/svgs/solid/project-diagram.svg'
import codeSvg from '@fortawesome/fontawesome-free/svgs/solid/code.svg'
import historySvg from '@fortawesome/fontawesome-free/svgs/solid/history.svg'
import saveSvg from '@fortawesome/fontawesome-free/svgs/solid/save.svg'
import terminalSvg from '@fortawesome/fontawesome-free/svgs/solid/terminal.svg'

import { Component } from '../../overmind'
import { Tab } from '../../overmind/types'
import { colors } from '../../theme'
import Apps from '../Apps'
import Tooltip from '../common/Tooltip'
import RuntimeConfig from '../RuntimeConfig'
import * as styles from './styles'

const Tabs: Component = (_, { appState, actions }) => {
  return (
    <self className={styles.wrapper}>
      <Apps />
      <div className={styles.divider} />
      <div className={styles.runtimeWrapper}>
        <button
          className={css(
            styles.button,
            styles.activeButton,
            styles.runtime[appState.currentApp.connectionState]
          )}
          onClick={() => actions.toggleRuntimeConfig()}
        >
          {chromeSvg}
        </button>
        {appState.isShowingRuntime ? <RuntimeConfig /> : null}
      </div>
      <div className={styles.divider} />
      <Tooltip text="State">
        <button
          className={css(
            styles.button,
            appState.currentTab === Tab.State && styles.activeButton
          )}
          onClick={() => actions.changeTab(Tab.State)}
        >
          {stateSvg}
        </button>
      </Tooltip>
      <Tooltip text="Actions">
        <div
          style={{ position: 'relative' }}
          className={css(styles.buttonWithCount)}
        >
          <button
            onClick={() => actions.changeTab(Tab.Actions)}
            style={{
              opacity: appState.currentTab === Tab.Actions ? 1 : null,
            }}
          >
            {cogsSvg}
          </button>

          <span
            className={styles.actionsCount}
            style={{
              backgroundColor: appState.hasActionsError ? colors.red : null,
            }}
            onClick={() => actions.changeTab(Tab.Actions)}
          >
            {appState.actionsCount}
          </span>
        </div>
      </Tooltip>
      <Tooltip text="Charts">
        <button
          className={css(
            styles.button,
            appState.currentTab === Tab.Charts && styles.activeButton
          )}
          onClick={() => actions.changeTab(Tab.Charts)}
        >
          {projectDiagramSvg}
        </button>
      </Tooltip>
      <Tooltip text="Components">
        <button
          className={css(
            styles.button,
            appState.currentTab === Tab.Components && styles.activeButton
          )}
          onClick={() => actions.changeTab(Tab.Components)}
        >
          {codeSvg}
        </button>
      </Tooltip>
      <Tooltip text="History">
        <button
          className={css(
            styles.button,
            appState.currentTab === Tab.History && styles.activeButton
          )}
          onClick={() => actions.changeTab(Tab.History)}
        >
          {historySvg}
        </button>
      </Tooltip>
      <Tooltip text="Flushes">
        <button
          className={css(
            styles.button,
            appState.currentTab === Tab.Flushes && styles.activeButton
          )}
          onClick={() => actions.changeTab(Tab.Flushes)}
        >
          {saveSvg}
        </button>
      </Tooltip>
      {process.env.NODE_ENV === 'development' ? (
        <Tooltip text="Console">
          <button
            className={css(
              styles.button,
              appState.currentTab === Tab.Console && styles.activeButton
            )}
            onClick={() => actions.changeTab(Tab.Console)}
          >
            {terminalSvg}
          </button>
        </Tooltip>
      ) : null}
    </self>
  )
}

export default Tabs
