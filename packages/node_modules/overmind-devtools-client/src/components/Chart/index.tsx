import { css } from 'emotion'
import { FunctionComponent, createElement } from 'react'
import { nameToColor } from '../../overmind/utils'
import { useOvermind } from '../../overmind'
import * as textStyles from '../../styles/text'
import * as styles from './styles'

const Chart: FunctionComponent = () => {
  const { state, actions } = useOvermind()

  const chart = state.currentChart

  return (
    <div className={styles.wrapper}>
      {Object.keys(chart.chart).map((key) => (
        <div key={key} className={styles.stateItem}>
          <div className={styles.stateNameCell}>
            <div
              className={styles.stateName}
              style={{
                backgroundColor:
                  chart.state === key
                    ? nameToColor(chart.path.join('.'))
                    : null,
              }}
            >
              <span className={textStyles.label}>{key}</span>
            </div>
          </div>
          <div className={styles.stateLineCell}>
            <div
              className={styles.selectedLine}
              style={{
                backgroundColor:
                  chart.state === key
                    ? nameToColor(chart.path.join('.'))
                    : null,
              }}
            />
          </div>
          {chart.chart[key].entry ? (
            <div className={styles.stateNameCell}>
              <div className={styles.stateName}>
                <span className={textStyles.normal}>
                  {chart.chart[key].entry}
                </span>
              </div>
            </div>
          ) : (
            <div className={styles.stateLineCell}>
              <div
                className={styles.selectedLine}
                style={{
                  backgroundColor:
                    chart.state === key
                      ? nameToColor(chart.path.join('.'))
                      : null,
                }}
              />
            </div>
          )}
          <div className={styles.stateLineCell}>
            <div
              className={styles.selectedLine}
              style={{
                backgroundColor:
                  chart.state === key
                    ? nameToColor(chart.path.join('.'))
                    : null,
              }}
            />
          </div>
          <div
            className={styles.onCell}
            style={{
              borderColor:
                chart.state === key ? nameToColor(chart.path.join('.')) : null,
            }}
          >
            {Object.keys(chart.chart[key].on).map((onKey) => (
              <div
                key={onKey}
                className={css(
                  styles.onName,
                  chart.actions[onKey] && styles.activeAction
                )}
              >
                <span className={textStyles.normal}>{onKey}</span>
              </div>
            ))}
          </div>
          {chart.chart[key].exit ? (
            <div className={styles.stateLineCell}>
              <div
                className={styles.selectedLine}
                style={{
                  backgroundColor:
                    chart.state === key
                      ? nameToColor(chart.path.join('.'))
                      : null,
                }}
              />
            </div>
          ) : (
            <div className={styles.stateLineCell} />
          )}
          {chart.chart[key].exit ? (
            <div className={styles.stateNameCell}>
              <div className={styles.stateName}>
                <span className={textStyles.normal}>
                  {chart.chart[key].exit}
                </span>
              </div>
            </div>
          ) : (
            <div className={styles.stateLineCell} />
          )}
        </div>
      ))}
    </div>
  )
}

export default Chart
