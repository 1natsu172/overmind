import { css } from 'emotion'
import { FunctionComponent, createElement } from 'react'

import { useOvermind } from '../../overmind'
import { Chart, NestedChart } from '../../overmind/types'
import { nameToColor } from '../../overmind/utils'
import * as textStyles from '../../styles/text'
import * as styles from './styles'

type Props = {
  chart: Chart
  statePath: (string | number)[]
  nestedChart?: NestedChart | NestedChart[]
}

const ChartComponent: FunctionComponent<Props> = ({
  chart,
  statePath,
  nestedChart = chart.chart,
}) => {
  const { state, actions } = useOvermind()

  if (Array.isArray(nestedChart)) {
    return (
      <div className={styles.parallelWrapper}>
        {nestedChart.map((nestedChartItem, index) => (
          <div key={'parallel-' + index} className={styles.parallelSplitter}>
            <ChartComponent
              chart={chart}
              statePath={statePath.concat(index)}
              nestedChart={nestedChartItem}
            />
          </div>
        ))}
      </div>
    )
  }

  return (
    <div className={styles.outerWrapper}>
      <div className={styles.wrapper}>
        {Object.keys(nestedChart.states).map((key) => {
          const isActiveState = chart.states.reduce((aggr, state) => {
            if (aggr) return true

            return state.join('.').startsWith(statePath.concat(key).join('.'))
          }, false)
          return (
            <div key={key} className={styles.stateItem}>
              <div className={styles.stateNameCell}>
                <div
                  className={styles.stateName}
                  style={{
                    backgroundColor: isActiveState
                      ? nameToColor(chart.path.join('.'))
                      : null,
                  }}
                >
                  <span className={textStyles.label}>{key}</span>
                </div>
              </div>
              <div className={styles.stateLineCell}>
                <div
                  className={styles.selectedLine}
                  style={{
                    backgroundColor: isActiveState
                      ? nameToColor(chart.path.join('.'))
                      : null,
                  }}
                />
              </div>
              {nestedChart.states[key].entry ? (
                <div className={styles.stateNameCell}>
                  <div
                    className={styles.stateAction}
                    style={{
                      borderColor: isActiveState
                        ? nameToColor(chart.path.join('.'))
                        : null,
                    }}
                  >
                    <span className={textStyles.normal}>
                      {nestedChart.states[key].entry}
                    </span>
                  </div>
                </div>
              ) : (
                <div className={styles.stateLineCell}>
                  <div
                    className={styles.selectedLine}
                    style={{
                      backgroundColor: isActiveState
                        ? nameToColor(chart.path.join('.'))
                        : null,
                    }}
                  />
                </div>
              )}
              <div className={styles.stateLineCell}>
                <div
                  className={styles.selectedLine}
                  style={{
                    backgroundColor: isActiveState
                      ? nameToColor(chart.path.join('.'))
                      : null,
                  }}
                />
              </div>
              <div
                className={styles.onCell}
                style={{
                  borderColor: isActiveState
                    ? nameToColor(chart.path.join('.'))
                    : null,
                }}
              >
                <div
                  className={styles.wrapper}
                  style={{ margin: 0, width: '100%' }}
                >
                  {Object.keys(nestedChart.states[key].on || {}).map(
                    (onKey) => {
                      let target
                      if (nestedChart.states[key].on[onKey]) {
                        target =
                          // @ts-ignore
                          nestedChart.states[key].on[onKey].target ||
                          nestedChart.states[key].on[onKey]
                      }
                      return (
                        <div key={onKey} className={styles.stateItem}>
                          <div
                            onClick={
                              chart.actions[onKey]
                                ? () =>
                                    actions.selectQueryAction(
                                      chart.path.concat(onKey).join('.')
                                    )
                                : null
                            }
                            className={css(
                              styles.stateNameCell,
                              styles.onName,
                              chart.actions[onKey] && styles.activeAction,
                              chart.path.concat(onKey).join('.') ===
                                state.currentApp.selectedActionQuery &&
                                styles.selectedAction
                            )}
                          >
                            <span className={textStyles.normal}>{onKey}</span>
                          </div>
                          <div className={styles.stateLineCell}>
                            {target ? (
                              <div className={styles.transitionLine} />
                            ) : null}
                          </div>
                          <div className={styles.transitionCell}>{target}</div>
                          <div className={styles.nestedRoomCell} />
                        </div>
                      )
                    }
                  )}
                  {nestedChart.states[key].chart ? (
                    <div className={styles.stateItem}>
                      <div className={styles.nestedChart}>
                        <ChartComponent
                          chart={chart}
                          statePath={statePath.concat(key)}
                          nestedChart={nestedChart.states[key].chart}
                        />
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
              {nestedChart.states[key].exit ? (
                <div className={styles.stateLineCell}>
                  <div
                    className={styles.selectedLine}
                    style={{
                      backgroundColor: isActiveState
                        ? nameToColor(chart.path.join('.'))
                        : null,
                    }}
                  />
                </div>
              ) : (
                <div className={styles.stateLineCell} />
              )}
              {nestedChart.states[key].exit ? (
                <div className={styles.stateNameCell}>
                  <div
                    className={styles.stateAction}
                    style={{
                      borderColor: isActiveState
                        ? nameToColor(chart.path.join('.'))
                        : null,
                    }}
                  >
                    <span className={textStyles.normal}>
                      {nestedChart.states[key].exit}
                    </span>
                  </div>
                </div>
              ) : (
                <div className={styles.stateLineCell} />
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}

export default ChartComponent
