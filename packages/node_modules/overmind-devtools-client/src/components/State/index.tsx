import { css } from 'emotion'
import { json } from 'overmind'
import { Child, createElement } from 'overmind-components'

import { Component } from '../../overmind'
import * as textStyles from '../../styles/text'
import Inspector, { RenderPaths } from '../Inspector'
import * as styles from './styles'

const DerivedWrapper: Component<{ children: Child[] }> = ({ children }) => (
  <self className={styles.label}>
    <div className={styles.labelWrapper}>
      <div className={styles.derivedLabel}>
        <span className={css(textStyles.hint, textStyles.monospace)}>
          derived
        </span>
      </div>
    </div>
    <div>{children}</div>
  </self>
)

const State: Component = (_, { appState, actions }) => {
  return (
    <self
      onMount={() => {
        const onKeyDown = (event) => {
          if (event.keyCode === 27) {
            actions.undoSettingState()
          }
        }
        window.addEventListener('keydown', onKeyDown)
        return () => {
          window.removeEventListener('keydown', onKeyDown)
        }
      }}
      className={styles.wrapper}
      onClick={() => actions.undoSettingState()}
    >
      <Inspector
        value={appState.currentApp.state || {}}
        expandedPaths={appState.currentApp.expandedStatePaths}
        onClickPath={actions.setState}
        onToggleExpand={actions.toggleExpandState}
        selectedStatePath={appState.currentApp.selectedStatePath}
        onSubmitState={actions.submitState}
        renderPaths={
          Object.assign(
            {},
            Object.keys(appState.currentApp.derived || {}).reduce(
              (aggr, key) =>
                Object.assign(aggr, {
                  [key]: (children) => (
                    <DerivedWrapper key={key}>{children}</DerivedWrapper>
                  ),
                }),
              {}
            )
          ) as RenderPaths
        }
      />
    </self>
  )
}

export default State
