const WebSocket = require('ws')

class DevtoolBackend {
  constructor(options) {
    this.options = options

    this.onError = this.onError.bind(this)
    this.onClientConnection = this.onClientConnection.bind(this)
    this.onDevtoolConnection = this.onDevtoolConnection.bind(this)
    this.onClientMessage = this.onClientMessage.bind(this)
    this.onDevtoolMessage = this.onDevtoolMessage.bind(this)

    this.devtoolServer = new WebSocket.Server(
      {
        port: options.port,
      },
      () => {}
    )

    this.devtoolServer.on('connection', this.onDevtoolConnection)
  }
  onDevtoolConnection(ws) {
    this.devtoolSocket = ws
    this.devtoolSocket.on('message', this.onDevtoolMessage)
  }
  async onDevtoolMessage(message) {
    const parsedMessage = JSON.parse(message)

    switch (parsedMessage.type) {
      case 'storage:get':
        this.evaluateDevtoolMessage(parsedMessage, () =>
          this.options.storage.get(parsedMessage.data.key)
        )
        break
      case 'storage:set':
        this.evaluateDevtoolMessage(parsedMessage, () =>
          this.options.storage.set(parsedMessage.key, parsedMessage.data)
        )
        break
      case 'storage:clear':
        this.evaluateDevtoolMessage(parsedMessage, () =>
          this.options.storage.clear()
        )
        break
      case 'relaunch':
        this.options.onRelaunch()
        break
      case 'connect':
        this.createClientServer(parsedMessage.data)
        break
      default:
        this.clientSocket.send(JSON.stringify(parsedMessage.data))
    }
  }
  onError() {
    this.devtoolServer.emit('port:exists')
  }
  onClientConnection(ws) {
    this.clientSocket = ws
    this.clientSocket.on('message', this.onClientMessage)
  }
  onClientMessage(message) {
    this.devtoolSocket.send(`
    {
      "type": "message",
      "data": ${message}
    }
    `)
  }
  async evaluateDevtoolMessage(message, cb) {
    const result = await cb()

    if ('evaluate' in message) {
      this.devtoolSocket.send(
        JSON.stringify({
          type: 'evaluated',
          data: {
            id: message.evaluate,
            data: result,
          },
        })
      )
    }
  }
  createClientServer(port) {
    if (this.clientPort === Number(port)) {
      return
    }

    if (this.clientServer) {
      this.clientServer.close()
    }

    this.clientPort = Number(port)
    this.clientServer = new WebSocket.Server(
      { port: this.clientPort },
      () => {}
    )
    this.clientServer.on('connection', this.onClientConnection)
    this.clientServer.on('error', this.onError)
  }
}

DevtoolBackend.create = (options) => new DevtoolBackend(options)

module.exports = DevtoolBackend
