import { stringify, parse } from ".";

test("should stringify objects", async () => {
  const obj = {
    foo: "bar",
    bar: {
      isAwesome: true
    },
    baz: ["foo", 123, true]
  };
  const result = await stringify(obj);
  expect(result).toBe(JSON.stringify(obj));
});

test("should parse string", async () => {
  const obj = JSON.stringify({
    foo: "bar",
    bar: {
      isAwesome: true
    },
    baz: ["foo", false, 123]
  });
  const result = await parse(obj);
  expect(result).toEqual(JSON.parse(obj));
});

test("should stringify objects in arrays", async () => {
  const obj = {
    demos: [
      {
        title: "Simple app"
      }
    ]
  };
  const result = await stringify(obj);
  expect(result).toBe(JSON.stringify(obj));
});

test("should stringify complex stuff", async () => {
  const string = '{"type":"effect","data":{"result":[{"title":"statecharts","fileName":"statecharts.md"}],"isPending":false,"error":false}}'
  const obj = JSON.parse(string)
  const result = await stringify(obj)
  expect(result).toBe(string)
})

test("should handle more scenarios", async () => {
  const string = '{"type":"effect","data":{"namespacePath":[],"actionId":"onInitialize","executionId":0,"actionName":"onInitialize","operatorId":0,"isRunning":true,"path":[],"type":"action","effectId":14,"name":"","method":"request","args":["/backend/apis"],"isPending":true,"error":false}}'
  const obj = JSON.parse(string)
  const result = await stringify(obj)
  expect(result).toBe(string)
})

test("should handle crazy scenario", async () => {
  const string = '{"foo":"\\"hey {}\\""}'
  const obj = JSON.parse(string)
  const result = await parse(string)
  expect(result).toEqual(obj)
})