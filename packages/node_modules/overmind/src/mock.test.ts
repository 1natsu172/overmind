import { createOvermindMock, IAction, TOnInitialize } from './'

type State = {
  foo: string
  upperFoo: string
}

describe('Mock', () => {
  test('should run action tests', async () => {
    type State = {
      foo: string
    }
    const state: State = {
      foo: 'bar',
    }
    const test: Action = ({ state, effects }) => {
      state.foo = effects.effect()
    }
    const actions = { test }
    const effect = () => 'bar2'
    const effects = { effect }
    const config = {
      state,
      actions,
      effects,
    }

    type Config = typeof config

    interface Action<Input = void> extends IAction<Config, Input> {}

    const overmind = createOvermindMock(config, {
      effect() {
        return 'bar3'
      },
    })

    const result = await overmind.actions.test()

    expect(result).toEqual([
      {
        method: 'set',
        path: 'foo',
        args: ['bar3'],
      },
    ])
  })
  test('should test onInitialize explicitly', async () => {
    type State = {
      foo: string
    }
    const state: State = {
      foo: 'bar',
    }
    const onInitialize: OnInitialize = async ({ state }) => {
      state.foo += '!'
    }

    const config = {
      onInitialize,
      state,
    }

    type Config = typeof config

    interface OnInitialize extends TOnInitialize<Config> {}

    const overmind = createOvermindMock(config, {
      effect() {
        return 'bar3'
      },
    })

    const result = await overmind.onInitialize()

    expect(result).toEqual([
      {
        method: 'set',
        path: 'foo',
        args: ['bar!'],
      },
    ])
  })
})
