import { EventEmitter } from 'betsy'
import isPlainObject from 'is-plain-obj'
import {
  IFlushCallback,
  IMutation,
  IMutationCallback,
  IS_PROXY,
  ProxyStateTree,
  TTree,
  VALUE,
} from 'proxy-state-tree'
import { Derived } from './derived'
import { Devtools, Message, safeValue, safeValues } from './Devtools'
import {
  Events,
  EventType,
  Execution,
  NestedPartial,
  Options,
  ResolveActions,
  DefaultMode,
  TestMode,
  SSRMode,
  ResolveState,
} from './internalTypes'
import { proxifyEffects } from './proxyfyEffects'
import {
  IAction,
  IConfiguration,
  IDerive,
  IOperator,
  IState,
  IOnInitialize,
  IContext,
} from './types'
import {
  deepCopy,
  MockedEventEmitter,
  makeStringifySafeMutations,
  mergeState,
  IS_DEVELOPMENT,
  IS_TEST,
  IS_PRODUCTION,
  IS_OPERATOR,
  getFunctionName,
} from './utils'
import {
  startDebugOperator,
  stopDebugOperator,
  createContext,
  createNextPath,
  createMutationOperator,
  createOperator,
} from './operator'

export * from './types'

export { createOperator, createMutationOperator }

/** This type can be overwriten by app developers if they want to avoid
 * typing and then they can import `Action`,  `Operation` etc. directly from
 * overmind.
 */
export interface Config {}

export interface Context extends IContext<Config> {}

export interface Action<Value = void> extends IAction<Config, Value> {}

export interface Derive<Parent extends IState, Value>
  extends IDerive<Config, Parent, Value> {}

export interface OnInitialize extends IOnInitialize<Config> {}

export const MODE_DEFAULT = Symbol('MODE_DEFAULT')
export const MODE_TEST = Symbol('MODE_TEST')
export const MODE_SSR = Symbol('MODE_SSR')

export interface OvermindSSR<Config extends IConfiguration>
  extends Overmind<Config> {
  hydrate(): IMutation[]
}

export function createOvermindSSR<Config extends IConfiguration>(
  config: Config
): OvermindSSR<Config> {
  const ssr = new Overmind(
    config,
    {
      devtools: false,
    },
    {
      mode: MODE_SSR,
    } as SSRMode
  ) as any

  const mutationTree = ssr.proxyStateTree.getMutationTree()

  ssr.state = mutationTree.state
  ssr.hydrate = () => {
    return mutationTree.flush().mutations
  }
  return ssr
}

export interface OvermindMock<Config extends IConfiguration>
  extends Overmind<Config> {
  onInitialize: () => Promise<IMutation[]>
}

export function createOvermindMock<Config extends IConfiguration>(
  config: Config,
  mockedEffects?: NestedPartial<Config['effects']>
): OvermindMock<Config> {
  const mock = new Overmind(
    Object.assign({}, config, {
      state: deepCopy(config.state),
    }),
    {
      devtools: false,
    },
    {
      mode: MODE_TEST,
      options: {
        effectsCallback: (effect) => {
          const mockedEffect = (effect.name
            ? effect.name.split('.')
            : []
          ).reduce((aggr, key) => (aggr ? aggr[key] : aggr), mockedEffects)

          if (!mockedEffect || (mockedEffect && !mockedEffect[effect.method])) {
            throw new Error(
              `The effect "${effect.name}" with metod ${
                effect.method
              } has not been mocked`
            )
          }
          return mockedEffect[effect.method](...effect.args)
        },
        actionCallback: (execution) => {
          return execution.flush().mutations
        },
      },
    } as TestMode
  ) as OvermindMock<Config>

  const action = (mock as any).createAction('onInitialize', config.onInitialize)

  mock.onInitialize = () => action(mock)

  return mock as any
}

export function createOvermind<Config extends IConfiguration>(
  config: Config,
  options?: Options
): Overmind<Config> {
  return new Overmind(config, options, { mode: MODE_DEFAULT })
}

const hotReloadingCache = {}

// We do not use IConfig<Config> directly to type the class in order to avoid
// the 'import(...)' function to be used in exported types.
export class Overmind<ThisConfig extends IConfiguration>
  implements IConfiguration {
  private proxyStateTree: ProxyStateTree<object>
  private actionReferences: Function[] = []
  private nextExecutionId: number = 0
  private options: Options
  private mode: DefaultMode | TestMode | SSRMode
  private originalConfiguration
  initialized: Promise<any>
  eventHub: EventEmitter<Events>
  devtools: Devtools
  actions: ResolveActions<ThisConfig['actions']>
  state: ResolveState<ThisConfig['state']>
  effects: ThisConfig['effects'] & {}
  constructor(
    configuration: ThisConfig,
    options: Options = {},
    mode: DefaultMode | TestMode | SSRMode = {
      mode: MODE_DEFAULT,
    } as DefaultMode
  ) {
    const name = options.name || 'OvermindApp'

    if (IS_DEVELOPMENT && mode.mode === MODE_DEFAULT) {
      if (hotReloadingCache[name]) {
        return hotReloadingCache[name].reconfigure(configuration)
      } else {
        hotReloadingCache[name] = this
      }
    }

    /*
      Set up an eventHub to trigger information from derived, computed and reactions
    */
    const eventHub =
      mode.mode === MODE_SSR
        ? new MockedEventEmitter()
        : new EventEmitter<Events>()

    /*
      Create the proxy state tree instance with the state and a wrapper to expose
      the eventHub
    */
    const proxyStateTree = this.createProxyStateTree(configuration, eventHub)

    this.originalConfiguration = configuration
    this.state = proxyStateTree.state
    this.effects = configuration.effects || {}
    this.proxyStateTree = proxyStateTree
    this.eventHub = eventHub as EventEmitter<Event>
    this.options = options
    this.mode = mode

    if (
      IS_DEVELOPMENT &&
      mode.mode === MODE_DEFAULT &&
      typeof window !== 'undefined'
    ) {
      let warning = 'OVERMIND: You are running in DEVELOPMENT mode.'
      if (options.logProxies !== true) {
        const originalConsoleLog = console.log

        console.log = (...args) =>
          originalConsoleLog.apply(
            console,
            args.map((arg) => (arg && arg[IS_PROXY] ? arg[VALUE] : arg))
          )
        warning +=
          '\n\n - To improve debugging experience "console.log" will NOT log proxies from Overmind, but the actual value. Please see docs to turn off this behaviour'
      }

      if (
        options.devtools ||
        (typeof location !== 'undefined' &&
          location.hostname === 'localhost' &&
          options.devtools !== false)
      ) {
        const host =
          options.devtools === true ? 'localhost:3031' : options.devtools
        const name = options.name
          ? options.name
          : typeof document === 'undefined'
          ? 'NoName'
          : document.title || 'NoName'

        this.initializeDevtools(
          host,
          name,
          eventHub,
          proxyStateTree.sourceState
        )
      } else {
        warning +=
          '\n\n - You are not running on localhost. You will have to manually define the devtools option to connect'
      }

      if (!IS_TEST) {
        console.warn(warning)
      }
    }

    if (IS_PRODUCTION) {
      eventHub.on(EventType.OPERATOR_ASYNC, () => {
        proxyStateTree.getMutationTree().flush()
      })
      eventHub.on(EventType.ACTION_END, () => {
        proxyStateTree.getMutationTree().flush()
      })

      let nextTick
      const flushTree = () => {
        proxyStateTree.getMutationTree().flush(true)
      }

      this.proxyStateTree.onMutation(() => {
        nextTick && clearTimeout(nextTick)
        nextTick = setTimeout(flushTree, 0)
      })
    } else if (mode.mode === MODE_DEFAULT) {
      eventHub.on(EventType.OPERATOR_ASYNC, (execution) => {
        const flushData = execution.flush()
        if (this.devtools && flushData.mutations.length) {
          this.devtools.send({
            type: 'flush',
            data: {
              ...execution,
              ...flushData,
            },
          })
        }
      })
      eventHub.on(EventType.ACTION_END, (execution) => {
        const flushData = execution.flush()

        if (this.devtools && flushData.mutations.length) {
          this.devtools.send({
            type: 'flush',
            data: {
              ...execution,
              ...flushData,
            },
          })
        }
      })
    }

    /*
      Expose the created actions
    */
    this.actions = this.getActions(configuration)

    if (mode.mode === MODE_DEFAULT && configuration.onInitialize) {
      const onInitialize = this.createAction(
        'onInitialize',
        configuration.onInitialize
      ) as any

      this.initialized = Promise.resolve(onInitialize(this))
    } else {
      this.initialized = Promise.resolve(null)
    }
  }
  private createProxyStateTree(
    configuration: IConfiguration,
    eventHub: EventEmitter<any> | MockedEventEmitter
  ) {
    const proxyStateTree = new ProxyStateTree(
      this.getState(configuration) as any,
      {
        devmode: IS_DEVELOPMENT,
        dynamicWrapper: (_, path, func) => func(eventHub, proxyStateTree, path),
        onGetter: IS_DEVELOPMENT
          ? (path, value) => {
              // We need to let any initial values be set first
              setTimeout(() => {
                this.eventHub.emit(EventType.GETTER, {
                  path,
                  value: safeValue(value),
                })
              })
            }
          : undefined,
      }
    )

    return proxyStateTree
  }
  private createExecution(name, action) {
    if (IS_PRODUCTION) {
      return ({
        getMutationTree: () => {
          return this.proxyStateTree.getMutationTree()
        },
        emit: this.eventHub.emit.bind(this.eventHub),
      } as any) as Execution
    }

    const mutationTrees: any[] = []
    const execution = {
      actionId: this.actionReferences.indexOf(action),
      executionId: this.nextExecutionId++,
      actionName: name,
      operatorId: 0,
      path: [],
      emit: this.eventHub.emit.bind(this.eventHub),
      send: this.devtools ? this.devtools.send.bind(this.devtools) : () => {},
      trackEffects: this.trackEffects.bind(this, this.effects),
      flush: () => {
        return this.proxyStateTree.flush(mutationTrees)
      },
      getMutationTree: () => {
        const mutationTree = this.proxyStateTree.getMutationTree()

        mutationTrees.push(mutationTree)

        return mutationTree
      },
      scopeValue: (value, tree) => {
        return this.scopeValue(value, tree)
      },
    }

    return execution
  }
  private createContext(value, execution, tree) {
    return {
      state: tree.state,
      actions: this.actions,
      execution,
      proxyStateTree: this.proxyStateTree,
      effects: this.trackEffects(this.effects, execution),
    }
  }
  private scopeValue(value: any, tree: TTree) {
    if (!value) {
      return value
    }
    if (value[IS_PROXY]) {
      return this.proxyStateTree.rescope(value, tree)
    } else if (isPlainObject(value)) {
      return Object.assign(
        {},
        ...Object.keys(value).map((key) => ({
          [key]: this.proxyStateTree.rescope(value[key], tree),
        }))
      )
    } else {
      return value
    }
  }
  private createAction(name, action) {
    this.actionReferences.push(action)
    const actionFunc = async (value?) => {
      if (IS_PRODUCTION || action[IS_OPERATOR]) {
        return new Promise((resolve, reject) => {
          const execution = this.createExecution(name, action)
          this.eventHub.emit(EventType.ACTION_START, execution)

          action[IS_OPERATOR]
            ? action(
                null,
                {
                  value,
                  state: this.proxyStateTree.state,
                  actions: this.actions,
                  execution,
                  effects: this.trackEffects(this.effects, execution),
                },
                (err, finalContext) => {
                  finalContext &&
                    this.eventHub.emit(EventType.ACTION_END, {
                      ...finalContext.execution,
                      operatorId: finalContext.execution.operatorId - 1,
                    })
                  if (err) reject(err)
                  else
                    resolve(
                      this.mode.mode === MODE_TEST
                        ? finalContext.execution
                        : undefined
                    )
                }
              )
            : resolve(
                action(
                  this.createContext(
                    value,
                    execution,
                    execution.getMutationTree()
                  ),
                  value
                )
                  ? undefined
                  : undefined
              )
        })
      } else {
        const execution = {
          ...this.createExecution(name, action),
          operatorId: 0,
          type: 'action',
        }
        this.eventHub.emit(EventType.ACTION_START, execution)
        this.eventHub.emit(EventType.OPERATOR_START, execution)

        const mutationTree = execution.getMutationTree()

        mutationTree.onMutation((mutation) => {
          this.eventHub.emit(EventType.MUTATIONS, {
            ...execution,
            mutations: makeStringifySafeMutations([mutation]),
          })

          setTimeout(() => {
            const flushData = mutationTree.flush(true)

            if (this.devtools && flushData.mutations.length) {
              this.devtools.send({
                type: 'flush',
                data: {
                  ...execution,
                  ...flushData,
                  mutations: makeStringifySafeMutations(flushData.mutations),
                },
              })
            }
          })
        })

        const scopedValue = this.scopeValue(value, mutationTree)
        const context = this.createContext(scopedValue, execution, mutationTree)
        const result = action(context, scopedValue)

        this.eventHub.emit(EventType.OPERATOR_END, {
          ...execution,
          isAsync: result instanceof Promise,
          result: undefined,
        })
        this.eventHub.emit(EventType.ACTION_END, execution)

        if (result) {
          await result
        }

        return this.mode.mode === MODE_TEST ? execution : undefined
      }
    }

    if (this.mode.mode === MODE_TEST) {
      const mode = this.mode as TestMode
      const actionCallback = mode.options.actionCallback

      return async (value?) => {
        const result = await actionFunc(value)

        return actionCallback(result)
      }
    }

    return actionFunc
  }
  private trackEffects(effects = {}, execution) {
    if (IS_PRODUCTION) {
      return effects
    }

    return proxifyEffects(this.effects, (effect) => {
      let result
      try {
        if (this.mode.mode === MODE_TEST) {
          const mode = this.mode as TestMode
          result = mode.options.effectsCallback(effect)
        } else {
          result = effect.func.apply(this, effect.args)
        }
      } catch (error) {
        // eslint-disable-next-line standard/no-callback-literal
        this.eventHub.emit(EventType.EFFECT, {
          ...execution,
          ...effect,
          args: safeValues(effect.args),
          isPending: false,
          error: error.message,
        })
        throw error
      }

      if (result instanceof Promise) {
        // eslint-disable-next-line standard/no-callback-literal
        this.eventHub.emit(EventType.EFFECT, {
          ...execution,
          ...effect,
          args: safeValues(effect.args),
          isPending: true,
          error: false,
        })
        result
          .then((promisedResult) => {
            // eslint-disable-next-line standard/no-callback-literal
            this.eventHub.emit(EventType.EFFECT, {
              ...execution,
              ...effect,
              args: safeValues(effect.args),
              result: safeValue(promisedResult),
              isPending: false,
              error: false,
            })
          })
          .catch((error) => {
            this.eventHub.emit(EventType.EFFECT, {
              ...execution,
              ...effect,
              args: safeValues(effect.args),
              isPending: false,
              error: error.message,
            })
            throw error
          })
      } else {
        // eslint-disable-next-line standard/no-callback-literal
        this.eventHub.emit(EventType.EFFECT, {
          ...execution,
          ...effect,
          args: safeValues(effect.args),
          result: safeValue(result),
          isPending: false,
          error: false,
        })
      }

      return result
    })
  }
  private initializeDevtools(host, name, eventHub, initialState) {
    const devtools = new Devtools(name)
    devtools.connect(
      host,
      (message: Message) => {
        // To use for communication from devtools app
      }
    )
    for (let type in EventType) {
      eventHub.on(EventType[type], (data) =>
        devtools.send({
          type: EventType[type],
          data,
        })
      )
    }
    // This message is always the first as it is passed synchronously, all other
    // events are emitted async
    devtools.send({
      type: 'init',
      data: {
        state: initialState,
      },
    })
    this.devtools = devtools
  }
  private getState(configuration: IConfiguration) {
    let state = {}
    if (configuration.state) {
      state = this.processState(configuration.state)
    }

    return state
  }
  private processState(state: {}) {
    return Object.keys(state).reduce((aggr, key) => {
      if (key === '__esModule') {
        return aggr
      }
      const originalDescriptor = Object.getOwnPropertyDescriptor(state, key)

      if (originalDescriptor && 'get' in originalDescriptor) {
        Object.defineProperty(aggr, key, originalDescriptor as any)

        return aggr
      }

      const value = state[key]

      if (isPlainObject(value)) {
        aggr[key] = this.processState(value)
      } else if (typeof value === 'function') {
        aggr[key] = new Derived(value)
      } else {
        Object.defineProperty(aggr, key, originalDescriptor as any)
      }

      return aggr
    }, {})
  }
  private getActions(configuration: IConfiguration) {
    let actions = {}
    if (configuration.actions) {
      actions = configuration.actions
    }

    const evaluatedActions = Object.keys(actions).reduce((aggr, name) => {
      if (typeof actions[name] === 'function') {
        return Object.assign(aggr, {
          [name]: this.createAction(name, actions[name]),
        })
      }

      return Object.assign(aggr, {
        [name]: Object.keys(actions[name] || {}).reduce(
          (aggr, subName) =>
            Object.assign(
              aggr,
              typeof actions[name][subName] === 'function'
                ? {
                    [subName]: this.createAction(
                      subName,
                      actions[name][subName]
                    ),
                  }
                : {}
            ),
          {}
        ),
      })
    }, {}) as any

    if (this.devtools) {
      Object.keys(evaluatedActions).forEach((key) => {
        if (typeof evaluatedActions[key] === 'function') {
          evaluatedActions[key].displayName = key
        } else {
          Object.keys(evaluatedActions[key]).forEach((subKey) => {
            evaluatedActions[key][subKey].displayName = key + '.' + subKey
          })
        }
      })
    }

    return evaluatedActions
  }
  getTrackStateTree() {
    return this.proxyStateTree.getTrackStateTree()
  }
  getMutationTree() {
    return this.proxyStateTree.getMutationTree()
  }
  addMutationListener = (cb: IMutationCallback) => {
    return this.proxyStateTree.onMutation(cb)
  }
  addFlushListener = (cb: IFlushCallback) => {
    return this.proxyStateTree.onFlush(cb)
  }
  rehydrate(state: object, mutations: IMutation[]) {
    mutations.forEach((mutation) => {
      const pathArray = mutation.path.split('.')
      const key = pathArray.pop()
      const target = pathArray.reduce((aggr, key) => aggr[key], state)

      if (mutation.method === 'set') {
        target[key] = mutation.args[0]
      } else if (mutation.method === 'unset') {
        delete target[key]
      } else {
        target[key][mutation.method](...mutation.args)
      }
    })
  }
  reconfigure(configuration: IConfiguration) {
    const mergedConfiguration = {
      ...configuration,
      state: mergeState(
        this.originalConfiguration.state,
        this.state,
        configuration.state
      ),
    }
    const proxyStateTree = this.proxyStateTree as any
    this.proxyStateTree.sourceState = this.getState(mergedConfiguration)
    proxyStateTree.createTrackStateProxifier()
    this.state = this.proxyStateTree.state as any
    this.actions = this.getActions(mergedConfiguration)
    this.effects = mergedConfiguration.effects || {}

    this.proxyStateTree.forceFlush()

    if (this.devtools) {
      this.devtools.send({
        type: 're_init',
        data: {
          state: proxyStateTree.sourceState,
        },
      })
    }

    return this
  }
}

/*
  OPERATORS
  needs to be in this file for typing override to work
*/
export type Operator<Input = void, Output = Input> = IOperator<
  Config,
  Input,
  Output
>

export function pipe<ThisConfig extends IConfiguration, A, B>(
  aOperator: IOperator<ThisConfig, A, B>
): IOperator<ThisConfig, A, B extends never ? any : B>

export function pipe<ThisConfig extends IConfiguration, A, B, C>(
  aOperator: IOperator<ThisConfig, A, B>,
  bOperator: IOperator<ThisConfig, B, C>
): IOperator<ThisConfig, A, C extends never ? any : C>

export function pipe<ThisConfig extends IConfiguration, A, B, C, D>(
  aOperator: IOperator<ThisConfig, A, B>,
  bOperator: IOperator<ThisConfig, B, C>,
  cOperator: IOperator<ThisConfig, C, D>
): IOperator<ThisConfig, A, D extends never ? any : D>

export function pipe<ThisConfig extends IConfiguration, A, B, C, D, E>(
  aOperator: IOperator<ThisConfig, A, B>,
  bOperator: IOperator<ThisConfig, B, C>,
  cOperator: IOperator<ThisConfig, C, D>,
  dOperator: IOperator<ThisConfig, D, E>
): IOperator<ThisConfig, A, E extends never ? any : E>

export function pipe<ThisConfig extends IConfiguration, A, B, C, D, E, F>(
  aOperator: IOperator<ThisConfig, A, B>,
  bOperator: IOperator<ThisConfig, B, C>,
  cOperator: IOperator<ThisConfig, C, D>,
  dOperator: IOperator<ThisConfig, D, E>,
  eOperator: IOperator<ThisConfig, E, F>
): IOperator<ThisConfig, A, F extends never ? any : F>

export function pipe<ThisConfig extends IConfiguration, A, B, C, D, E, F, G>(
  aOperator: IOperator<ThisConfig, A, B>,
  bOperator: IOperator<ThisConfig, B, C>,
  cOperator: IOperator<ThisConfig, C, D>,
  dOperator: IOperator<ThisConfig, D, E>,
  eOperator: IOperator<ThisConfig, E, F>,
  fOperator: IOperator<ThisConfig, F, G>
): IOperator<ThisConfig, A, G extends never ? any : G>

export function pipe(...operators) {
  const instance = (err, context, next, final = next) => {
    if (err) next(err)
    else {
      let operatorIndex = 0

      const run = (operatorErr, operatorContext) => {
        const operator = operators[operatorIndex++]

        if (!operator) return next(operatorErr, operatorContext)

        if (operatorErr)
          return operator(operatorErr, operatorContext, run, final)

        if (operatorContext.value instanceof Promise) {
          context.execution.emit(EventType.OPERATOR_ASYNC, {
            ...operatorContext.execution,
            isAsync: true,
          })
          operatorContext.value
            .then((promiseValue) =>
              operator(
                null,
                { ...operatorContext, value: promiseValue },
                run,
                final
              )
            )
            .catch((promiseError) =>
              operator(promiseError, operatorContext, run, final)
            )
        } else {
          try {
            operator(null, operatorContext, run, final)
          } catch (operatorError) {
            operator(operatorError, operatorContext, run, final)
          }
        }
      }

      run(null, context)
    }
  }
  instance[IS_OPERATOR] = true
  return instance
}

/*
  OPERATORS
*/
export function forEach<
  Input extends any[],
  ThisConfig extends IConfiguration = Config
>(
  forEachItemOperator: IOperator<
    ThisConfig,
    Input extends Array<infer U> ? U : never
  >
): IOperator<ThisConfig, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err, context)
    else {
      let array = context.value
      let evaluatingCount = array.length
      let lastContext
      let hasErrored = false
      const evaluate = (err) => {
        if (hasErrored) {
          return
        }
        if (err) {
          hasErrored = true
          return next(err)
        }
        evaluatingCount--

        if (!evaluatingCount) {
          stopDebugOperator(lastContext, lastContext.value)
          next(null, lastContext)
        }
      }
      startDebugOperator('forEach', '', context)

      array.forEach((value, index) => {
        lastContext = createContext(
          lastContext || context,
          value,
          context.execution.path && context.execution.path.concat(String(index))
        )
        const nextWithPath = createNextPath(evaluate)
        // @ts-ignore
        forEachItemOperator(null, lastContext, nextWithPath)
      })
    }
  }
  instance[IS_OPERATOR] = true

  return instance as any
}

export function parallel<Input, ThisConfig extends IConfiguration = Config>(
  ...operators: IOperator<ThisConfig, Input>[]
): IOperator<ThisConfig, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err, context)
    else {
      let evaluatingCount = operators.length
      let lastContext
      let hasErrored = false
      const evaluate = (err) => {
        if (hasErrored) {
          return
        }
        if (err) {
          hasErrored = true
          return next(err, lastContext)
        }
        evaluatingCount--

        if (!evaluatingCount) {
          stopDebugOperator(lastContext, lastContext.value)
          next(null, lastContext)
        }
      }
      startDebugOperator('parallel', '', context)

      operators.forEach((operator, index) => {
        lastContext = createContext(
          lastContext || context,
          context.value,
          context.execution.path && context.execution.path.concat(String(index))
        )
        const nextWithPath = createNextPath(evaluate)
        // @ts-ignore
        operator(null, lastContext, nextWithPath)
      })
    }
  }
  instance[IS_OPERATOR] = true

  return instance as any
}

export function map<Input, Output, ThisConfig extends IConfiguration = Config>(
  operation: (context: IContext<ThisConfig>, value: Input) => Output
): IOperator<ThisConfig, Input, Output extends Promise<infer U> ? U : Output> {
  return createOperator<ThisConfig>(
    'map',
    getFunctionName(operation),
    (err, context, value, next) => {
      if (err) next(err, value)
      else next(null, operation(context, value))
    }
  )
}

export function filter<Input, ThisConfig extends IConfiguration = Config>(
  operation: (context: IContext<ThisConfig>, value: Input) => boolean
): IOperator<ThisConfig, Input, Input> {
  return createOperator<ThisConfig>(
    'filter',
    getFunctionName(operation),
    (err, context, value, next, final) => {
      if (err) next(err, value)
      else if (operation(context, value)) next(null, value)
      else final(null, value)
    }
  )
}

export function action<Input, ThisConfig extends IConfiguration = Config>(
  operation: (context: IContext<ThisConfig>, value: Input) => void
): IOperator<ThisConfig, Input, Input> {
  return createMutationOperator<ThisConfig>(
    'action',
    getFunctionName(operation),
    (err, context, value, next) => {
      if (err) next(err, value)
      else {
        const result = operation(context, value) as any

        if (result instanceof Promise) {
          result
            .then(() => next(null, value))
            .catch((promiseErr) => next(promiseErr, value))
        } else {
          next(null, value)
        }
      }
    }
  )
}

export function catchError<Input, ThisConfig extends IConfiguration = Config>(
  operation: (context: IContext<ThisConfig>, value: Error) => Input
): IOperator<ThisConfig, Input, Input> {
  return createMutationOperator<ThisConfig>(
    'catchError',
    getFunctionName(operation),
    (err, context, value, next) => {
      if (err) next(null, operation(context, err))
      else next(null, value)
    }
  )
}

export function tryCatch<
  Input,
  ThisConfig extends IConfiguration = Config
>(paths: {
  try: IOperator<ThisConfig, Input>
  catch: IOperator<ThisConfig, Error>
}): IOperator<ThisConfig, Input, Input> {
  const instance = (err, context, next) => {
    if (err) next(err, context)
    else {
      const evaluateCatch = (err, catchContext) => {
        stopDebugOperator(context, context.value)
        next(err, createContext(catchContext, context.value))
      }
      const evaluateTry = (err, tryContext) => {
        if (err) {
          const newContext = createContext(
            tryContext,
            err,
            context.execution.path && context.execution.path.concat('catch')
          )
          const nextWithPath = createNextPath(evaluateCatch)

          // @ts-ignore
          paths.catch(null, newContext, nextWithPath)
        } else {
          stopDebugOperator(context, context.value)
          next(null, createContext(tryContext, context.value))
        }
      }

      startDebugOperator('tryCatch', '', context)

      const newContext = createContext(
        context,
        context.value,
        context.execution.path && context.execution.path.concat('try')
      )
      const nextWithPath = createNextPath(evaluateTry)

      // @ts-ignore
      paths.try(null, newContext, nextWithPath)
    }
  }
  instance[IS_OPERATOR] = true

  return instance as any
}

export function fork<
  Input,
  Paths extends { [key: string]: IOperator<ThisConfig, Input, any> },
  ThisConfig extends IConfiguration = Config
>(
  operation: (context: IContext<ThisConfig>, value: Input) => keyof Paths,
  paths: Paths
): IOperator<ThisConfig, Input, Input> {
  return createOperator<ThisConfig>(
    'fork',
    getFunctionName(operation),
    (err, context, value, next) => {
      if (err) next(err, value)
      else {
        const path = operation(context, value)
        next(null, value, {
          name: String(path),
          operator: paths[path],
        })
      }
    }
  )
}

export function when<
  Input,
  OutputA,
  OutputB,
  ThisConfig extends IConfiguration = Config
>(
  operation: (context: IContext<ThisConfig>, value: Input) => boolean,
  paths: {
    true: IOperator<ThisConfig, Input, OutputA>
    false: IOperator<ThisConfig, Input, OutputB>
  }
): IOperator<ThisConfig, Input, OutputA | OutputB> {
  return createOperator<ThisConfig>(
    'when',
    getFunctionName(operation),
    (err, context, value, next) => {
      if (err) next(err, value)
      else if (operation(context, value))
        next(null, value, {
          name: 'true',
          operator: paths.true,
        })
      else
        next(null, value, {
          name: 'false',
          operator: paths.false,
        })
    }
  )
}

export function wait<Input, ThisConfig extends IConfiguration = Config>(
  ms: number
): IOperator<ThisConfig, Input, Input> {
  return createOperator('wait', String(ms), (err, context, value, next) => {
    if (err) next(err, value)
    else setTimeout(() => next(null, value), ms)
  })
}

export function debounce<Input, ThisConfig extends IConfiguration = Config>(
  ms: number
): IOperator<ThisConfig, Input, Input> {
  let timeout
  let previousFinal

  return createOperator(
    'debounce',
    String(ms),
    (err, context, value, next, final) => {
      if (err) next(err, value)
      else {
        if (timeout) {
          clearTimeout(timeout)
          previousFinal(null, value)
        }
        previousFinal = final
        timeout = setTimeout(() => {
          timeout = null
          next(null, value)
        }, ms)
      }
    }
  )
}
