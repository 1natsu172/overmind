import { VALUE } from 'proxy-state-tree'

import { Derive } from './'

export type StatemachineDefinition<States extends string> = {
  initial: States,
  states: {
    [State in States]: Array<States>
  }
}

export type Statemachine<States extends string> = {
  current: States
  reset: () => void
} & {
  [State in States]: <T>(entry?: () => T, exit?: () => void) => T
}

const CURRENT_EXIT = Symbol('CURRENT_EXIT')

class StateMachine<States extends string>  {
  current: States
  private [CURRENT_EXIT]: (() => void) | undefined
  constructor(definition: StatemachineDefinition<States>) {
    this.current = definition.initial

    Object.keys(definition.states).reduce((aggr, key) => {
      aggr[key] = function (entry, exit) {
        if (definition.states[this.current].includes(key as any)) {
          if (this[CURRENT_EXIT]) this._currentExit()
          this[VALUE][CURRENT_EXIT] = exit
          this.current = key as any
          return entry && entry()
        }
      }
  
      return aggr
    }, this)
  }
  reset() {
    const exit = this[CURRENT_EXIT]
    if (typeof exit === 'function') {
      exit()
      this[VALUE][CURRENT_EXIT] = undefined
    }
  }
}

export function statemachine<States extends string>(definition: StatemachineDefinition<States>): Statemachine<States> {
  return new StateMachine(definition) as any
}
