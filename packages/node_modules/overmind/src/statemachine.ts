import { Derive } from './'

export type StatemachineDefinition<States extends string> = {
  initial: States,
  states: {
    [State in States]: Array<States>
  }
}

export type Statemachine<States extends string> = {
  current: States
  reset: () => void
} & {
  [State in States]: Derive<any, <T>(entry?: () => T, exit?: () => void) => T>
}

export function statemachine<States extends string>(chart: StatemachineDefinition<States>): Statemachine<States> {
  let currentExit

  return {
    current: chart.initial,
    ...Object.keys(chart.states).reduce((aggr, key) => {
      aggr[key] = () => { 
        return function (entry, exit) {
          if (chart.states[this.current].includes(key as any)) {
            if (currentExit) currentExit()
            currentExit = exit
            this.current = key
            return entry && entry()
          }
        }
      }
  
      return aggr
    }, {}),
    reset: () => {
      return function() {
        const caller = this
        caller.current = chart.initial
        if (currentExit) {
          currentExit()
          currentExit = null
        }
      }
    }
  } as any
}
