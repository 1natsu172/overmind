import { PROXY_TREE, VALUE } from 'proxy-state-tree'
import { deepCopy } from './utils'
import { IState } from '.'

type TStates = IState & {
  state: string | number,
}

export type StatemachineTransitions<States extends TStates> = {
  [State in States["state"]]: Array<States["state"]>
}

export interface MachineMethods<States extends TStates> {
  matches<T extends States["state"]>(state: T): this is Statemachine<States, States extends {
    state: T
} ? States : never>;
  transition<T extends States["state"]>(
    state: T,
  ): undefined | Statemachine<States, States extends {
    state: T
} ? States : never>
}

export type Statemachine<States extends TStates, State extends TStates = States> = State & MachineMethods<States>

const INITIAL_STATE = Symbol('INITIAL_STATE')
const TRANSITIONS = Symbol('TRANSITIONS')
const STATE = Symbol('STATE')

export class StateMachine<States extends TStates, State extends TStates = States>  {
  state: State["state"]
  private [INITIAL_STATE]: State["state"]
  private [STATE]: any
  private clone() {
    return new StateMachine(this[TRANSITIONS], deepCopy(this[STATE]))
  }
  constructor(transitions: StatemachineTransitions<States>, state: States) {
    this[STATE] = state
    this[INITIAL_STATE] = state.state
    this[TRANSITIONS] = transitions
    Object.assign(this, state)
  }
  transition(state) {
    const transitions = this[VALUE][TRANSITIONS]
    if (transitions[this.state].includes(state)) {
      const tree = (this[PROXY_TREE].master.mutationTree || this[PROXY_TREE])
      tree.enableMutations()
      this.state = state
      Promise.resolve().then(() => tree.blockMutations())
      return this
    } else if (process.env.NODE_ENV === 'development' && state !== this.state) {
      console.warn(`Overmind Statemachine - You tried to transition into "${state}", but it is not a valid transition. The valid transitions are ${JSON.stringify(transitions[this.state])}`)
    } else if (process.env.NODE_ENV === 'development' && state === this.state) {
      console.warn(`Overmind Statemachine - You tried to transition into "${state}", but you are already in this state. Do a "match" before running this piece of logic or add it as a valid state transition for this state`)
    }
  }
  matches(state) {
    if (state === this.state) {
      const tree = (this[PROXY_TREE].master.mutationTree || this[PROXY_TREE])
      // Might be used outside of action
      tree.enableMutations && tree.enableMutations()
      return true
    }

    return false
  }
}

export function statemachine<States extends TStates>(transitions: StatemachineTransitions<States>, state: States): Statemachine<States> {
  return new StateMachine(transitions, state) as any
}
