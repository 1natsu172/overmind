import isPlainObject from 'is-plain-obj'
import { IMutation } from 'proxy-state-tree'
import { safeValues } from './Devtools'

export class MockedEventEmitter {
  emit() {}
  emitAsync() {}
  on() {}
  once() {}
  addListener() {}
}

export const makeStringifySafeMutations = (mutations: IMutation[]) => {
  return mutations.map((mutation) => ({
    ...mutation,
    args: safeValues(mutation.args),
  }))
}

export function deepCopy(obj) {
  if (isPlainObject(obj)) {
    return Object.keys(obj).reduce((aggr, key) => {
      aggr[key] = deepCopy(obj[key])

      return aggr
    }, {})
  } else if (Array.isArray(obj)) {
    return obj.map((item) => deepCopy(item))
  }

  return obj
}

export function mergeState(originState, oldState, nextState) {
  function merge(origin, old, next) {
    if (isPlainObject(old) && isPlainObject(next)) {
      const newBranch = {}

      for (let key in next) {
        newBranch[key] = merge(origin[key], old[key], next[key])
      }

      return newBranch
    }

    if (typeof next === 'function') {
      return next
    }

    // We return the existing array, as arrays are typically
    // mutated, not set with new values as initial state
    if (Array.isArray(old) && Array.isArray(next)) {
      return old
    }

    // If we have changed a state from origin, keep that
    // changed state
    if (next === origin && old !== origin) {
      return old
    }

    return next
  }

  return merge(originState, oldState, nextState)
}
