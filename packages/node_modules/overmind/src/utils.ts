import isPlainObject from 'is-plain-obj'
import { IMutation } from 'proxy-state-tree'
import { safeValues } from './Devtools'

export class MockedEventEmitter {
  emit() {}
  emitAsync() {}
  on() {}
  once() {}
  addListener() {}
}

export const makeStringifySafeMutations = (mutations: IMutation[]) => {
  return mutations.map((mutation) => ({
    ...mutation,
    args: safeValues(mutation.args),
  }))
}

export function deepCopy(obj) {
  if (isPlainObject(obj)) {
    return Object.keys(obj).reduce((aggr, key) => {
      aggr[key] = deepCopy(obj[key])

      return aggr
    }, {})
  } else if (Array.isArray(obj)) {
    return obj.map((item) => deepCopy(item))
  }

  return obj
}
