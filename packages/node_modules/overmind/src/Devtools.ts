import { SERIALIZE } from './rehydrate'

export type Message = {
  type: string
  data?: object
}

export type DevtoolsMessage = {
  type: string
  appName: string
  data: any
}

function isClass(value: any) {
  return (
    typeof value === 'object' &&
    !Array.isArray(value) && 
    value !== null &&
    value.constructor &&
    value.constructor.name !== 'Object'
  )
}

export class Devtools {
  private safeClassNames: Set<string> = new Set()
  private unsafeClassNames: Set<string> = new Set()
  private buffer: string[] = []
  private ws: WebSocket
  private isConnected: boolean = false
  private doReconnect: boolean = false
  private hasWarnedReconnect: boolean = false
  private reconnectInterval: number = 10000
  private name: string
  constructor(name: string) {
    this.name = name
  }
  connect = (host: string, onMessage: (message: Message) => void) => {
    host = host || 'localhost:3031'

    this.ws = new WebSocket(`ws://${host}?name=${this.name}`)
    this.ws.onmessage = (event) => onMessage(JSON.parse(event.data))
    this.ws.onopen = () => {
      this.isConnected = true
      this.sendBuffer()
    }
    this.ws.onerror = () => {
      console.error(
        `OVERMIND DEVTOOLS: Not able to connect. You are trying to connect to "${host}", but there was no devtool there. Try the following:
        
          - Make sure you are running the latest version of the devtools, using "npx overmind-devtools@latest" or install latest extension for VSCode
          - Close the current tab and open a new one
          - Make sure the correct port is configured in the devtools
        `
      )
    }
    this.ws.onclose = () => {
      this.isConnected = false

      if (this.doReconnect && !this.hasWarnedReconnect) {
        console.warn(
          'Debugger application is not running on selected port... will reconnect automatically behind the scenes'
        )
        this.hasWarnedReconnect = true
      }

      if (this.doReconnect) {
        this.reconnect(host, onMessage)
      }
    }
  }
  private reconnect(host, onMessage) {
    setTimeout(
      () =>
        this.connect(
          host,
          onMessage
        ),
      this.reconnectInterval
    )
  }
  send(message: Message) {
    const safeClassNames = this.safeClassNames
    const unsafeClassNames = this.unsafeClassNames
    const stringifiedMessage = JSON.stringify(
      message,
      function (_, value) {
        if (typeof value === 'function') {
          return '[Function]'
        }

        if (this.__CLASS__) {
          return value
        }

        if (value && value[SERIALIZE]) {
          return {
            __CLASS__: true,
            name: value.constructor.name,
            value   
          }
        }

        if (Array.isArray(value) && isClass(value[0])) {
          if (!safeClassNames.has(value[0].constructor.name) && !unsafeClassNames.has(value[0].constructor.name)) {
            try {
              JSON.stringify(value[0])
              safeClassNames.add(value[0].constructor.name)
            } catch {
              unsafeClassNames.add(value[0].constructor.name)
            }
          }
          
          if (safeClassNames.has(value[0].constructor.name)) {
            return value.map((item) => ({
              __CLASS__: true,
              name: value[0].constructor.name,
              value: item
            }))
          } else {
            return value.map(() => `[${value.constructor.name || 'NOT SERIALIZABLE'}]`)
          }
        } else if (isClass(value)) {
          if (!safeClassNames.has(value.constructor.name) && !unsafeClassNames.has(value.constructor.name)) {
            try {
              JSON.stringify(value)
              safeClassNames.add(value.constructor.name)
            } catch {
              unsafeClassNames.add(value.constructor.name)
            }
          }
          
          if (safeClassNames.has(value.constructor.name)) {
            return {
              __CLASS__: true,
              name: value.constructor.name,
              value
            }
          } else {
            return `[${value.constructor.name || 'NOT SERIALIZABLE'}]`
          }
        }

        return value
      },
      0
    )
    this.buffer.push(stringifiedMessage)
    this.sendBuffer()
  }
  private sendBuffer = () => {
    if (this.isConnected && this.buffer.length) {
      this.ws.send(
        `{ "appName": "${this.name}", "message": ${this.buffer.shift()} }`
      )

      if (this.buffer.length) {
        setTimeout(this.sendBuffer)
      }
    }
  }
}
