import { Action, pipe, OnInitialize, Operator } from 'overmind'
import {
  Message,
  Tab,
  AppMessageType,
  ExecutionType,
  ActionsListItemType,
} from './types'
import {
  forkEachMessage,
  ensureCurrentApp,
  addFlushAndRunMutations,
  updateComponent,
  addComponent,
  removeComponent,
  updateDerived,
  updateFlushWithDerived,
  addAction,
  addOperator,
  updateOperator,
  updateAction,
  addMutations,
  updateEffect,
  setPortExists,
  isPortExistsMessage,
  getMessages,
  addState,
  ensureApp,
  addClientMessages,
  updateOperatorAsync,
  runGetterMutation,
} from './operators'

export const onInitialize: OnInitialize = async ({ state, effects }, app) => {
  const port = await effects.storage.get<string>('currentPort')
  if (port) {
    state.port = port
  }
  effects.connector.onMessage(app.actions.onMessage)
  effects.connector.connect(state.port)
}

const handleClientMessage: Operator<Message, any> = pipe(
  ensureCurrentApp,
  ensureApp,
  addClientMessages,
  getMessages,
  forkEachMessage({
    [AppMessageType.PORT_EXISTS]: setPortExists,
    [ExecutionType.INIT]: addState,
    [ExecutionType.RE_INIT]: addState,
    [ExecutionType.FLUSH]: addFlushAndRunMutations,
    [ExecutionType.DERIVED]: updateDerived,
    [ExecutionType.MUTATIONS]: addMutations,
    [ExecutionType.EFFECT]: updateEffect,
    [ExecutionType.COMPONENT_ADD]: addComponent,
    [ExecutionType.COMPONENT_UPDATE]: updateComponent,
    [ExecutionType.COMPONENT_REMOVE]: removeComponent,
    [ExecutionType.DERIVED_DIRTY]: updateFlushWithDerived,
    [ExecutionType.ACTION_START]: addAction,
    [ExecutionType.OPERATOR_START]: addOperator,
    [ExecutionType.OPERATOR_END]: updateOperator,
    [ExecutionType.ACTION_END]: updateAction,
    [ExecutionType.OPERATOR_ASYNC]: updateOperatorAsync,
    [ExecutionType.GETTER]: runGetterMutation,
  })
)

export const onMessage: Operator<Message> = pipe(
  isPortExistsMessage({
    true: setPortExists,
    false: handleClientMessage,
  })
)

export const setError: Action<string> = ({ state }, error) =>
  (state.error = error)

export const changeNewPortValue: Action<string> = ({ state }, port) =>
  (state.newPortValue = String(Number(port)))

export const addConnection: Action = ({ state, effects }) => {
  state.error = null
  state.isConnecting = true
  state.port = state.newPortValue
  state.newPortValue = ''
  effects.connector.connect(state.port)
}

export const changeTab: Action<Tab> = ({ state }, tab) =>
  (state.currentTab = tab)

export const toggleExpandState: Action<string[]> = ({ state }, path) => {
  const pathString = path.join('.')

  if (state.expandedStatePaths.indexOf(pathString) >= 0) {
    state.expandedStatePaths.splice(
      state.expandedStatePaths.indexOf(pathString),
      1
    )
  } else {
    state.expandedStatePaths = state.expandedStatePaths.concat(pathString)
  }
}

export const selectAction: Action<string> = ({ state }, actionId) => {
  for (let index in state.currentApp.actionsList) {
    const item = state.currentApp.actionsList[index]
    if (
      item.type === ActionsListItemType.GROUP &&
      item.id === actionId &&
      state.currentApp.currentActionId === actionId
    ) {
      item.isCollapsed = !item.isCollapsed
      break
    }
  }
  state.currentApp.currentActionId = actionId
}

export const toggleCollapsedFlush: Action<number> = ({ state }, id) => {
  if (!state.expandAllActionDetails) {
    state.currentApp.flushes[id].isCollapsed = !state.currentApp.flushes[id]
      .isCollapsed
  }
}

export const toggleCollapsedOperator: Action<number> = (
  { state },
  operatorIndex
) => {
  if (!state.expandAllActionDetails) {
    const currentApp = state.apps[state.currentAppName]
    const currentAction = currentApp.actions[currentApp.currentActionId]
    const operator = currentAction.operators[operatorIndex]

    operator.isCollapsed = !operator.isCollapsed
  }
}

export const toggleGroupedComponent: Action<string> = ({ state }, name) => {
  const index = state.expandedComponents.indexOf(name)

  if (index === -1) {
    state.expandedComponents.push(name)
  } else {
    state.expandedComponents.splice(index, 1)
  }
}

export const selectApp: Action<string> = ({ state }, appName) => {
  state.currentAppName = appName
  state.showApps = false
}

export const toggleExpandAllActions: Action = ({ state }) =>
  (state.expandAllActionDetails = !state.expandAllActionDetails)

export const toggleShowApps: Action = ({ state }) =>
  (state.showApps = !state.showApps)
