import { createElement, FunctionComponent } from 'react'
import { useOvermind } from '../../overmind'
import * as styles from './styles'
import ActionOperator from '../ActionOperator'
import Flush from '../ActionFlush'
import { getActionId, getOperatorId } from '../../overmind/utils'

const Action: FunctionComponent = () => {
  const { state } = useOvermind()
  const flushReference =
    state.currentApp.flushByActionId[getActionId(state.currentAction)]
  const flush =
    flushReference && state.currentApp.flushes[flushReference.flushId]

  return (
    <div className={styles.wrapper}>
      {Object.keys(state.currentAction.operators)
        .sort()
        .map((operatorId, index, keys) => {
          const operator = state.currentAction.operators[operatorId]
          const prevOperator = state.currentAction.operators[index - 1]
          const value =
            index === 0 ? state.currentAction.value : prevOperator.result
          const flushReference =
            state.currentApp.flushByOperatorId[getOperatorId(operator)]
          const flush =
            flushReference && state.currentApp.flushes[flushReference.flushId]

          return (
            <div key={operator.actionId + '_' + operator.operatorId}>
              <ActionOperator
                prevOperator={prevOperator}
                operator={operator}
                value={value}
                operatorIndex={index}
              />
              {index === keys.length - 1 &&
              state.currentAction.isIntercepted ? (
                <div className={styles.breakStyle}>break</div>
              ) : null}
              {flush ? <Flush flush={flush} /> : null}
            </div>
          )
        })}
      {!state.currentAction.isRunning && flush ? <Flush flush={flush} /> : null}
    </div>
  )
}

export default Action
