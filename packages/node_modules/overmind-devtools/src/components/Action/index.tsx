import { createElement, FunctionComponent, Fragment } from 'react'
import { useOvermind } from '../../overmind'
import * as styles from './styles'
import ActionOperator from '../ActionOperator'
import { getOperatorId, nameToColor } from '../../overmind/utils'
import { Operator } from '../../overmind/types'

type OperatorsByPath = Array<{
  path: string
  operator: Operator
  childrenByPath: OperatorsByPath[]
  value: any
}>

// TODO: Remove flush by action id?
const Action: FunctionComponent = () => {
  const { state } = useOvermind()
  const operators = Object.keys(state.currentAction.operators)
    .map((id) => Number(id))
    .sort((a, b) => a - b)
    .map((operatorId) => state.currentAction.operators[operatorId])
  const operatorsByPath = operators.reduce(
    (aggr, operator): OperatorsByPath[] => {
      let currentValue = state.currentAction.value
      const traversePath = operator.path.slice()
      traversePath.unshift('')
      traversePath.reduce((childrenByPath, key, index) => {
        const isLastKey = index === traversePath.length - 1
        const matchingChildren = childrenByPath.find(
          (children) => children[0].path === key
        )
        const lastChildByPath = matchingChildren
          ? matchingChildren[matchingChildren.length - 1]
          : null

        if (isLastKey) {
          const newChild = {
            path: key,
            operator,
            childrenByPath: [],
            value: matchingChildren
              ? lastChildByPath.operator.result
              : currentValue,
          }

          matchingChildren
            ? matchingChildren.push(newChild)
            : childrenByPath.push([newChild])

          return
        }

        currentValue = lastChildByPath.value

        return lastChildByPath.childrenByPath
      }, aggr)

      return aggr
    },
    []
  )
  function renderOperators(operatorsByPath: OperatorsByPath) {
    return operatorsByPath.map((operatorByPath, index) => {
      const flushReference =
        state.currentApp.flushByOperatorId[
          getOperatorId(operatorByPath.operator)
        ]
      const flush =
        flushReference && state.currentApp.flushes[flushReference.flushId]

      return (
        <div key={operatorByPath.path + index}>
          <ActionOperator
            operator={operatorByPath.operator}
            flush={flush}
            value={operatorByPath.value}
          />
          {operatorByPath.childrenByPath.length
            ? operatorByPath.childrenByPath.map(
                (childOperatorsByPath, index) => (
                  <div key={index} className={styles.operatorChildren}>
                    <div
                      className={styles.path}
                      style={{
                        backgroundColor: nameToColor(
                          childOperatorsByPath[0].path
                        ),
                      }}
                    >
                      {childOperatorsByPath[0].path}
                    </div>
                    <div className={styles.pathOperators}>
                      {renderOperators(childOperatorsByPath)}
                    </div>
                  </div>
                )
              )
            : null}
        </div>
      )
    })
  }

  console.log(operatorsByPath)

  return (
    <div className={styles.wrapper}>
      {operatorsByPath.map(renderOperators)}
      {state.currentAction.isIntercepted ? (
        <div className={styles.breakStyle}>break</div>
      ) : null}
    </div>
  )
}

export default Action
