import { createElement, FunctionComponent } from 'react'
import * as styles from './styles'
import { useOvermind } from '../../overmind'
import {
  HistoryRecordType,
  MutationHistoryRecord,
  FlushHistoryRecord,
  EffectHistoryRecord,
} from '../../overmind/types'
import ValueInspector from 'overmind-devtools/src/components/ValueInspector'
import {
  FaCode,
  FaLink,
  FaSave,
  FaVolumeDown,
  FaVolumeUp,
  FaDatabase,
} from 'react-icons/fa'

const History: FunctionComponent = () => {
  const { state } = useOvermind()

  return (
    <div className={styles.wrapper}>
      {state.history.map((record, index) => {
        switch (record.type) {
          case HistoryRecordType.Mutation:
            const mutationRecord = record as MutationHistoryRecord

            return (
              <div className={styles.recordWrapper} key={index}>
                <div className={styles.label}>
                  <FaDatabase />
                </div>
                <div className={styles.mutationType}>
                  {mutationRecord.data.method}
                </div>
                <div className={styles.mutationPath}>
                  {mutationRecord.data.path}
                </div>
                {mutationRecord.data.args.map((arg, index) => (
                  <div className={styles.arg} key={'arg_' + index}>
                    <ValueInspector value={arg} small />
                  </div>
                ))}
              </div>
            )
          case HistoryRecordType.Flush:
            const flushRecord = record as FlushHistoryRecord

            return (
              <div className={styles.recordWrapper} key={index}>
                <div className={styles.label}>
                  <FaSave />
                </div>
                <div className={styles.flushDetail}>
                  {flushRecord.data.components.length} <FaCode />
                </div>
                <div className={styles.flushDetail}>
                  {flushRecord.data.derived.length} <FaLink />
                </div>
              </div>
            )
          case HistoryRecordType.Effect:
            const effectRecord = record as EffectHistoryRecord

            return (
              <div className={styles.recordWrapper} key={index}>
                <div className={styles.label}>
                  {effectRecord.data.isPending ? (
                    <FaVolumeDown />
                  ) : (
                    <FaVolumeUp />
                  )}
                </div>
                <div className={styles.effectPath}>
                  {effectRecord.data.name
                    ? effectRecord.data.name + '.' + effectRecord.data.method
                    : effectRecord.data.method}
                </div>
                {effectRecord.data.args.map((arg, index) => (
                  <div className={styles.arg} key={'arg_' + index}>
                    <ValueInspector value={arg} small />
                  </div>
                ))}
              </div>
            )
        }

        return null
      })}
    </div>
  )
}

export default History
