import * as vscode from 'vscode'
import { DevtoolsPanel } from './DevtoolsPanel'
import * as path from 'path'

import { log } from './utils/Logger'

class TempStorage {
  private storage: any = {}
  public get(key: string): Promise<any> {
    return new Promise((resolve, reject) => {
      resolve(this.storage[key] || undefined)
    })
  }

  public set(key: string, value: any) {
    return new Promise((resolve, reject) => {
      this.storage[key] = value
      resolve()
    })
  }

  public clear() {
    return new Promise((resolve, reject) => {
      this.storage = {}
      resolve()
    })
  }
}

const storage = new TempStorage()

const DevtoolBackend = require('overmind-devtools-client/DevtoolBackend')
DevtoolBackend.create({
  port: 3031,
  onRelaunch() {
    console.log('relaunch')
  },
  storage,
})

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {
  context.subscriptions.push(
    vscode.commands.registerCommand('overmind-devtools.start', () => {
      const onDiskPath = vscode.Uri.file(
        path.join(context.extensionPath, 'devtoolsDist', 'bundle.js')
      )
      const scriptFile = onDiskPath.with({ scheme: 'vscode-resource' })

      DevtoolsPanel.scriptFile = scriptFile
      DevtoolsPanel.createOrShow(context.extensionPath) // refactor to keep local reference to panel
    })
  )

  // TODO: what does this do?
  if (vscode.window.registerWebviewPanelSerializer) {
    vscode.window.registerWebviewPanelSerializer(DevtoolsPanel.viewType, {
      async deserializeWebviewPanel(
        webViewPanel: vscode.WebviewPanel,
        state: any
      ) {
        DevtoolsPanel.revive(webViewPanel, context.extensionPath)
      },
    })
  }
}

// this method is called when your extension is deactivated
export function deactivate() {
  log('Extension deactivated')
}
