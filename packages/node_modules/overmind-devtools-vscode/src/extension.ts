import * as vscode from 'vscode'
import { DevtoolsPanel } from './DevtoolsPanel'
import { log } from './utils/Logger'
import * as path from 'path'

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {
  const storage = {
    get(key: string) {
      return new Promise((resolve) => {
        resolve(context.workspaceState.get(key))
      })
    },

    set(key: string, value: any) {
      return new Promise((resolve) => {
        context.workspaceState.update(key, value)
        resolve()
      })
    },

    clear() {
      return new Promise((resolve) => {
        resolve()
      })
    },
  }

  context.subscriptions.push(
    vscode.commands.registerCommand('overmind-devtools.start', () => {
      const port: number =
        vscode.workspace.getConfiguration().get('overmind-devtools.port') ||
        3031
      const DevtoolBackend = require('overmind-devtools-client/DevtoolBackend')
      const devtoolBackend = DevtoolBackend.create({
        onRelaunch() {
          console.log('relaunch')
        },
        storage,
      })

      console.log('Firing it up!!!!')
      devtoolBackend
        .connect(port)
        .then(() => {
          console.log('Okay... moving on!')
          let scriptFile: vscode.Uri | string

          // TODO consider https://github.com/microsoft/vscode/commit/fbcdb4c6a736ff38e60a7e9d0a3f1be5ccbaf3af ?
          if (process.env.VSCODE_DEBUG_MODE) {
            scriptFile = 'http://localhost:8080/bundle.js'
          } else {
            const onDiskPath = vscode.Uri.file(
              path.join(context.extensionPath, 'devtoolsDist', 'bundle.js')
            )
            scriptFile = onDiskPath.with({ scheme: 'vscode-resource' })
          }

          DevtoolsPanel.markup = devtoolBackend.getMarkup(scriptFile, port)
          DevtoolsPanel.createOrShow(context.extensionPath) // refactor to keep local reference to panel
        })
        .catch(() => {
          // HANDLE WRONG PORT HERE :-)
        })
    })
  )

  // TODO: what does this do?
  if (vscode.window.registerWebviewPanelSerializer) {
    vscode.window.registerWebviewPanelSerializer(DevtoolsPanel.viewType, {
      async deserializeWebviewPanel(
        webViewPanel: vscode.WebviewPanel,
        state: any
      ) {
        DevtoolsPanel.revive(webViewPanel, context.extensionPath)
      },
    })
  }
}

// this method is called when your extension is deactivated
export function deactivate() {
  log('Extension deactivated')
}
