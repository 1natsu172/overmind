import * as vscode from 'vscode'
import { DevtoolsPanel } from './DevtoolsPanel'
import { log } from './utils/Logger'
import * as path from 'path'

const DevtoolBackend = require('overmind-devtools-client/DevtoolBackend')

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {
  const storage = {
    get(key: string) {
      return new Promise((resolve) => {
        resolve(context.workspaceState.get(key))
      })
    },

    set(key: string, value: any) {
      return new Promise((resolve) => {
        context.workspaceState.update(key, value)
        resolve()
      })
    },

    clear() {
      return new Promise((resolve) => {
        resolve()
      })
    },
  }
  const devtoolBackend = DevtoolBackend.create({
    onRelaunch() {
      devtoolBackend.close()
      startDevtools()
    },
    storage,
  })
  const devtoolsPanel = new DevtoolsPanel({
    context,
    onMessage: (command, text) => {
      switch (command) {
        case 'newPort':
          storage.set('overmind-devtools.port', text)
          startDevtools()
          break
        case 'restart':
          devtoolBackend.close()
          startDevtools()
          break
      }
    },
    onDispose() {
      devtoolBackend.close()
    },
  })

  function startDevtools() {
    const port: number =
      vscode.workspace.getConfiguration().get('overmind.port') || 3031

    devtoolBackend
      .connect(port)
      .then(() => {
        let scriptFile: vscode.Uri | string

        // TODO consider https://github.com/microsoft/vscode/commit/fbcdb4c6a736ff38e60a7e9d0a3f1be5ccbaf3af ?
        if (process.env.VSCODE_DEBUG_MODE || vscode.workspace.getConfiguration().get('overmind.devmode.enabled')) {
          scriptFile = <string>vscode.workspace.getConfiguration().get('overmind.devmode.url')
        } else {
          const onDiskPath = vscode.Uri.file(
            path.join(context.extensionPath, 'devtoolsDist', 'bundle.js')
          )
          scriptFile = onDiskPath.with({ scheme: 'vscode-resource' })
        }

        /*
    // activityBar-background
    foreground: 'hsl(206, 57%, 17%)',
    // editor-background
    background: 'hsl(206, 57%, 13%)',
    // dropdown-border
    border: 'hsl(206, 57%, 16%)',
    // editor-foreground
    text: 'hsl(0, 0%, 90%)',
    // focusForeground
    highlight: 'hsl(0, 0%, 85%)'
        */
        devtoolsPanel.show(
          devtoolBackend.getMarkup(scriptFile, port).replace(
            '</head>',
            `
<style>
  :root {
    --colors-background: var(--vscode-editor-background) !important;
    --colors-foreground: var(--vscode-activityBar-background) !important;
    --colors-border: var(--vscode-dropdown-border) !important;
    --colors-text: var(--vscode-editor-foreground) !important;
    --colors-highlight: var(--vscode-breadcrumb-focusForeground) !important;
  }
</style>
</head>        
`
          )
        )
      })
      .catch(() => {
        devtoolsPanel.show(
          devtoolBackend.getChangePortMarkup(
            port,
            function onNewPortSubmit(newPort: string) {
              // @ts-ignore
              const vscode = (window.vscode =
                // @ts-ignore
                window.vscode || acquireVsCodeApi())
              vscode.postMessage({
                command: 'newPort',
                text: newPort,
              })
            },
            function onRestart() {
              // @ts-ignore
              const vscode = (window.vscode =
                // @ts-ignore
                window.vscode || acquireVsCodeApi())
              vscode.postMessage({
                command: 'restart',
              })
            }
          )
        )
      })
  }

  context.subscriptions.push(
    vscode.commands.registerCommand('overmind-devtools.start', startDevtools)
  )

  // This is supposed keep Overmind extension in same position on restart, though
  // do not think we need that really? https://code.visualstudio.com/api/extension-guides/webview
  /*
  if (vscode.window.registerWebviewPanelSerializer) {
    vscode.window.registerWebviewPanelSerializer(DevtoolsPanel.viewType, {
      async deserializeWebviewPanel(
        webViewPanel: vscode.WebviewPanel,
        state: any
      ) {
        DevtoolsPanel.revive(webViewPanel, context.extensionPath)
      },
    })
  }
  */
}

// this method is called when your extension is deactivated
export function deactivate() {
  log('Extension deactivated')
}
