import * as vscode from 'vscode'
import { DevtoolsPanel } from './DevtoolsPanel'
import * as path from 'path'
import { log } from './utils/Logger'

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {
  const storage = {
    get(key:string){
      return new Promise((resolve) => {
        resolve(context.workspaceState.get(key))
      })
    },

    set (key:string, value: any)
    {
      return new Promise((resolve) => {
        context.workspaceState.update(key, value)
        resolve()
      })
    },

    clear()
    {
      return new Promise((resolve) => {
        resolve()
      })
    }
  }

  const DevtoolBackend = require('overmind-devtools-client/DevtoolBackend')
  DevtoolBackend.create({
    port: 3031,
    onRelaunch() {
      console.log('relaunch')
    },
    storage,
  })


  context.subscriptions.push(
    vscode.commands.registerCommand('overmind-devtools.start', () => {
      // const onDiskPath = vscode.Uri.file(
      //   path.join(context.extensionPath, '../overmind-devtools-client/dist/', 'bundle.js')
      // )
      // const scriptFile = onDiskPath.with({ scheme: 'vscode-resource' })

      // DevtoolsPanel.scriptFile = scriptFile
      DevtoolsPanel.createOrShow(context.extensionPath) // refactor to keep local reference to panel
    })
  )

  // TODO: what does this do?
  if (vscode.window.registerWebviewPanelSerializer) {
    vscode.window.registerWebviewPanelSerializer(DevtoolsPanel.viewType, {
      async deserializeWebviewPanel(
        webViewPanel: vscode.WebviewPanel,
        state: any
      ) {
        DevtoolsPanel.revive(webViewPanel, context.extensionPath)
      },
    })
  }
}

// this method is called when your extension is deactivated
export function deactivate() {
  log('Extension deactivated')
}
