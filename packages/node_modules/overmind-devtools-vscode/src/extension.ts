import * as vscode from 'vscode'
import { DevtoolsPanel } from './DevtoolsPanel'
import { log } from './utils/Logger'
import * as path from 'path'

function getMarkup(scriptSource: vscode.Uri | string): string {
  return `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Document</title>
    <link
      href="https://fonts.googleapis.com/css?family=Source+Code+Pro"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Nunito:400,700"
      rel="stylesheet"
    />
  </head>
  <body>
  <script type="text/javascript" src="${scriptSource}"></script>
  </body>
</html>
`
}

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {
  const storage = {
    get(key: string) {
      return new Promise((resolve) => {
        resolve(context.workspaceState.get(key))
      })
    },

    set(key: string, value: any) {
      return new Promise((resolve) => {
        context.workspaceState.update(key, value)
        resolve()
      })
    },

    clear() {
      return new Promise((resolve) => {
        resolve()
      })
    },
  }

  const DevtoolBackend = require('overmind-devtools-client/DevtoolBackend')
  DevtoolBackend.create({
    port: 3031,
    onRelaunch() {
      console.log('relaunch')
    },
    storage,
  })

  context.subscriptions.push(
    vscode.commands.registerCommand('overmind-devtools.start', () => {
      let scriptFile: vscode.Uri | string

      // TODO consider https://github.com/microsoft/vscode/commit/fbcdb4c6a736ff38e60a7e9d0a3f1be5ccbaf3af ?
      if (process.env.VSCODE_DEBUG_MODE) {
        scriptFile = 'http://localhost:8080/bundle.js'
      } else {
        const onDiskPath = vscode.Uri.file(
          path.join(context.extensionPath, 'devtoolsDist', 'bundle.js')
        )
        scriptFile = onDiskPath.with({ scheme: 'vscode-resource' })
      }

      DevtoolsPanel.markup = getMarkup(scriptFile)
      DevtoolsPanel.createOrShow(context.extensionPath) // refactor to keep local reference to panel
    })
  )

  // TODO: what does this do?
  if (vscode.window.registerWebviewPanelSerializer) {
    vscode.window.registerWebviewPanelSerializer(DevtoolsPanel.viewType, {
      async deserializeWebviewPanel(
        webViewPanel: vscode.WebviewPanel,
        state: any
      ) {
        DevtoolsPanel.revive(webViewPanel, context.extensionPath)
      },
    })
  }
}

// this method is called when your extension is deactivated
export function deactivate() {
  log('Extension deactivated')
}
