import * as vscode from 'vscode'
import { log } from './utils/Logger'

const findActionRegex = /^\s*export (?:const|let)\s([^:]+)\s*?:\s*?(?:Async)?Action(?:<([^>]*?)>)?\s*?=/g

export const initRunActions = (
  context: vscode.ExtensionContext,
  appName: string,
  appNameConnection: { send(payload: string): void },
  avaiableActions: string[]
) => {
  const sendExecuteMessage = (actionName: string, payload: any = undefined) => {
    appNameConnection.send(
      JSON.stringify({
        appName,
        type: 'executeAction',
        data: {
          name: actionName,
          payload,
        },
      })
    )
  }
  const executeAction = (actionName: string, needsPayload: boolean) => {
    if (needsPayload) {
      vscode.window
        .showInputBox({
          ignoreFocusOut: true,
          prompt: `Payload for ${actionName}`,
          placeHolder: `{some:"data"}`,
        })
        .then((payload) => {
          // TODO: Detect primitive types e.g. numbers, strings, boolean
          if (payload !== undefined) {
            let data: any = payload
            if (!payload.startsWith('"')) {
              data = parseInt(payload, 10)
            }
            sendExecuteMessage(actionName, data)
          }
        })
    } else {
      sendExecuteMessage(actionName)
    }
  }
  const getExactOrSingleMatch = (searchActionName: string) => {
    if (avaiableActions.indexOf(searchActionName) !== -1) {
      return searchActionName
    }
    const matches = avaiableActions.filter((actionName) =>
      actionName.includes(searchActionName)
    )
    if (matches.length === 1) {
      return matches[0]
    }
    return null
  }

  context.subscriptions.push(
    vscode.commands.registerCommand(
      'overmind-devtools.runAction',
      (preSelectActionName: string, needsPayload: boolean) => {
        const foundAction = getExactOrSingleMatch(preSelectActionName)
        if (foundAction) {
          executeAction(foundAction, needsPayload)
        } else {
          const quickPick = vscode.window.createQuickPick()
          quickPick.value = preSelectActionName
          quickPick.ignoreFocusOut = true
          quickPick.canSelectMany = false
          quickPick.title = 'Which action do you want to execute:'
          quickPick.items = avaiableActions.map((label) => ({
            label,
          }))
          quickPick.onDidAccept(() => {
            quickPick.dispose()
            const selectedAction = quickPick.selectedItems[0].label
            executeAction(selectedAction, needsPayload)
          })
          quickPick.onDidHide(() => quickPick.dispose())
          quickPick.show()
        }
      }
    )
  )

  // TODO: How to clean up code lenses
  // adding this to the context isn't disposing
  // when the DevtoolsPanel is closed
  context.subscriptions.push(
    vscode.languages.registerCodeLensProvider(
      { scheme: 'file', language: 'typescript' },
      {
        provideCodeLenses(
          doc: vscode.TextDocument,
          token: vscode.CancellationToken
        ) {
          const text = doc.getText()
          const lenses: vscode.CodeLens[] = []
          const lines = text.split('\n')

          lines.forEach((line: string, index) => {
            const match = findActionRegex.exec(line)
            if (match !== null) {
              const actionName = match[1]
              const needsPayload = match[2] !== undefined
              lenses.push(
                new vscode.CodeLens(
                  new vscode.Range(
                    new vscode.Position(index, match.index),
                    new vscode.Position(index, match.index + match[0].length)
                  ),
                  {
                    title: `Run ${actionName}...`,
                    command: 'overmind-devtools.runAction',
                    arguments: [actionName, needsPayload],
                  }
                )
              )
            }
          })

          return lenses
        },
        resolveCodeLens(
          codeLens: vscode.CodeLens,
          token: vscode.CancellationToken
        ) {
          return codeLens
        },
      }
    )
  )
}
